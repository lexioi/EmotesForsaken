-- Obfuscated by assistant

local function __b64_decode(data)
    local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if x == '=' then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r = r .. (f%2^i - f%2^(i-1) > 0 and '1' or '0') end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d', function(x)
        if #x ~= 8 then return '' end
        local c = 0
        for i=1,8 do c = c*2 + (x:sub(i,i) == '1' and 1 or 0) end
        return string.char(c)
    end))
end

local __strs = {}
local function __s(i)
    return __b64_decode(__strs[i])
end

do
__strs[1] = "RE9kU2NySXB0"
__strs[2] = "aHR0cHM6Ly9kaXNjb3JkLmdnL2FHazJHZFl5Umc="
__strs[3] = "UGxheWVycw=="
__strs[4] = "UGxheWVyR3Vp"
__strs[5] = "U2NyZWVuR3Vp"
__strs[6] = "S2V5U3lzdGVtR3Vp"
__strs[7] = "RnJhbWU="
__strs[8] = "VGV4dExhYmVs"
__strs[9] = "S2V5IFN5c3RlbQ=="
__strs[10] = "VGV4dEJveA=="
__strs[11] = "RW50ZXIgeW91ciBrZXkuLi4="
__strs[12] = ""
__strs[13] = "VGV4dEJ1dHRvbg=="
__strs[14] = "Q29weSBMaW5r"
__strs[15] = "VGV4dEJ1dHRvbg=="
__strs[16] = "U3VibWl0IEtleQ=="
__strs[17] = "VGV4dExhYmVs"
__strs[18] = ""
__strs[19] = "Q29waWVkIQ=="
__strs[20] = "Cgpsb2NhbCBSZXBsaWNhdGVkU3RvcmFnZSA9IGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKQpsb2NhbCBQbGF5ZXJzID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikKbG9jYWwgVXNlcklucHV0U2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVXNlcklucHV0U2VydmljZSIpCmxvY2FsIFJ1blNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKQoKCmxvY2FsIHBsYXllciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKbG9jYWwgY2hhcmFjdGVyOiBNb2RlbD8gPSBwbGF5ZXIuQ2hhcmFjdGVyCmxvY2FsIGh1bWFub2lkOiBIdW1hbm9pZD8KbG9jYWwgb3JpZ2luYWxKdW1wUG93ZXIgPSA1MAoKCmxvY2FsIGNoYXJhY3RlcnNGb2xkZXIgPSBSZXBsaWNhdGVkU3RvcmFnZTpXYWl0Rm9yQ2hpbGQoIkNoYXJhY3RlcnMiKQpsb2NhbCBraWxsZXJDaGFyYWN0ZXJzRm9sZGVyID0gY2hhcmFjdGVyc0ZvbGRlciBhbmQgY2hhcmFjdGVyc0ZvbGRlcjpGaW5kRmlyc3RDaGlsZCgiS2lsbGVyIikKbG9jYWwgc3Vydml2b3JDaGFyYWN0ZXJzRm9sZGVyID0gY2hhcmFjdGVyc0ZvbGRlciBhbmQgY2hhcmFjdGVyc0ZvbGRlcjpGaW5kRmlyc3RDaGlsZCgiU3Vydml2b3IiKQoKCgoKbG9jYWwgbW92ZW1lbnRBbmltQ29ubmVjdGlvbjogUkJYU2NyaXB0Q29ubmVjdGlvbj8gPSBuaWwKbG9jYWwgYWN0aXZlTW92ZW1lbnRBbmltczoge0lkbGU6IHN0cmluZz8sIFdhbGs6IHN0cmluZz8sIFNwcmludDogc3RyaW5nP30/ID0gbmlsIApsb2NhbCBjdXJyZW50TW92ZW1lbnRBbmltVHJhY2s6IEFuaW1hdGlvblRyYWNrPyA9IG5pbApsb2NhbCBpc0F1dG9Bbmltc0VuYWJsZWQgPSB0cnVlCgpsb2NhbCBpc1N1cnZpdm9yQXV0b0FuaW1zRW5hYmxlZCA9IGZhbHNlCmxvY2FsIGlzU3Vydml2b3JIdXJ0QW5pbXNFbmFibGVkID0gZmFsc2UKCgoKCgpsb2NhbCBjYXRlZ29yeURhdGEgPSB7CiAgICBbIktpbGxlciBBbmltYXRpb25zIl0gPSB7CiAgICAgICAgZGF0YVNvdXJjZSA9IHt9LCAKICAgICAgICBzdWJDYXRlZ29yaWVzID0ge30sCiAgICAgICAgYnV0dG9ucyA9IHt9LAogICAgICAgIHNjcm9sbGluZ0ZyYW1lID0gbmlsLAogICAgICAgIHVpTGlzdExheW91dCA9IG5pbCwKICAgICAgICBidXR0b25OYW1lQ2FjaGUgPSB7fSwKICAgICAgICBjdXJyZW50U3ViQ2F0ZWdvcnlGcmFtZSA9IG5pbCwKICAgICAgICBjdXJyZW50U3ViQ2F0ZWdvcnlMYXlvdXQgPSBuaWwsCiAgICB9LAogICAgWyJLaWxsZXItU2tpbnMgQW5pbSJdID0gewogICAgICAgIGRhdGFTb3VyY2UgPSB7fSwgCiAgICAgICAgc3ViQ2F0ZWdvcmllcyA9IHt9LAogICAgICAgIHNraW5TdWJDYXRlZ29yaWVzID0ge30sCiAgICAgICAgYnV0dG9ucyA9IHt9LAogICAgICAgIHNjcm9sbGluZ0ZyYW1lID0gbmlsLAogICAgICAgIHVpTGlzdExheW91dCA9IG5pbCwKICAgICAgICBidXR0b25OYW1lQ2FjaGUgPSB7fSwKICAgICAgICBjdXJyZW50U3ViQ2F0ZWdvcnlGcmFtZSA9IG5pbCwKICAgICAgICBjdXJyZW50U3ViQ2F0ZWdvcnlMYXlvdXQgPSBuaWwsCiAgICAgICAgY3VycmVudFNraW5GcmFtZSA9IG5pbCwKICAgICAgICBjdXJyZW50U2tpbkxheW91dCA9IG5pbCwKICAgIH0sCiAgICBbIlN1cnZpdm9ycyBBbmltYXRpb25zIl0gPSB7CiAgICAgICAgZGF0YVNvdXJjZSA9IHt9LCAKICAgICAgICBzdWJDYXRlZ29yaWVzID0ge30sCiAgICAgICAgYnV0dG9ucyA9IHt9LAogICAgICAgIHNjcm9sbGluZ0ZyYW1lID0gbmlsLAogICAgICAgIHVpTGlzdExheW91dCA9IG5pbCwKICAgICAgICBidXR0b25OYW1lQ2FjaGUgPSB7fSwKICAgICAgICBjdXJyZW50U3ViQ2F0ZWdvcnlGcmFtZSA9IG5pbCwKICAgICAgICBjdXJyZW50U3ViQ2F0ZWdvcnlMYXlvdXQgPSBuaWwsCiAgICB9LAp9CgoKbG9jYWwgc2NyZWVuR3VpID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiKQpzY3JlZW5HdWkuTmFtZSA9ICJFbW90ZUd1aSIKc2NyZWVuR3VpLlBhcmVudCA9IHBsYXllcjpXYWl0Rm9yQ2hpbGQoIlBsYXllckd1aSIpCnNjcmVlbkd1aS5SZXNldE9uU3Bhd24gPSBmYWxzZQoKbG9jYWwgb3BlbkJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCm9wZW5CdXR0b24uTmFtZSA9ICJPcGVuQnV0dG9uIgpvcGVuQnV0dG9uLlBhcmVudCA9IHNjcmVlbkd1aQpvcGVuQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMTUwLCAwLCA1MCkKb3BlbkJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIC03NSwgMC44LCAwKQpvcGVuQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig0NSwgNDUsIDQ1KQpvcGVuQnV0dG9uLkJvcmRlckNvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCm9wZW5CdXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCm9wZW5CdXR0b24uVGV4dCA9ICJPcGVuIE1lbnUiCm9wZW5CdXR0b24uRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zQm9sZApvcGVuQnV0dG9uLlRleHRTaXplID0gMjAKb3BlbkJ1dHRvbi5BY3RpdmUgPSB0cnVlCm9wZW5CdXR0b24uRHJhZ2dhYmxlID0gdHJ1ZQoKbG9jYWwgbWFpbkZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCm1haW5GcmFtZS5OYW1lID0gIkVtb3RlTWVudSIKbWFpbkZyYW1lLlBhcmVudCA9IHNjcmVlbkd1aQptYWluRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygwLCA1MDAsIDAsIDQ1MCkKbWFpbkZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLTI1MCwgMC41LCAtMjI1KQptYWluRnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDM1LCAzNSwgMzUpCm1haW5GcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC42Cm1haW5GcmFtZS5Cb3JkZXJDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQptYWluRnJhbWUuVmlzaWJsZSA9IGZhbHNlCm1haW5GcmFtZS5BY3RpdmUgPSB0cnVlCm1haW5GcmFtZS5EcmFnZ2FibGUgPSB0cnVlCm1haW5GcmFtZS5DbGlwc0Rlc2NlbmRhbnRzID0gdHJ1ZQoKbG9jYWwgY2F0ZWdvcnlCdXR0b25zRnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIikKY2F0ZWdvcnlCdXR0b25zRnJhbWUuTmFtZSA9ICJDYXRlZ29yeUJ1dHRvbnMiCmNhdGVnb3J5QnV0dG9uc0ZyYW1lLlBhcmVudCA9IG1haW5GcmFtZQpjYXRlZ29yeUJ1dHRvbnNGcmFtZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDQwKQpjYXRlZ29yeUJ1dHRvbnNGcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCAwKQpjYXRlZ29yeUJ1dHRvbnNGcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjUsIDI1LCAyNSkKY2F0ZWdvcnlCdXR0b25zRnJhbWUuQm9yZGVyU2l6ZVBpeGVsID0gMAoKbG9jYWwgdWlMaXN0TGF5b3V0Q2F0ZWdvcmllcyA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0IikKdWlMaXN0TGF5b3V0Q2F0ZWdvcmllcy5QYXJlbnQgPSBjYXRlZ29yeUJ1dHRvbnNGcmFtZQp1aUxpc3RMYXlvdXRDYXRlZ29yaWVzLkZpbGxEaXJlY3Rpb24gPSBFbnVtLkZpbGxEaXJlY3Rpb24uSG9yaXpvbnRhbAp1aUxpc3RMYXlvdXRDYXRlZ29yaWVzLkhvcml6b250YWxBbGlnbm1lbnQgPSBFbnVtLkhvcml6b250YWxBbGlnbm1lbnQuQ2VudGVyCnVpTGlzdExheW91dENhdGVnb3JpZXMuVmVydGljYWxBbGlnbm1lbnQgPSBFbnVtLlZlcnRpY2FsQWxpZ25tZW50LkNlbnRlcgp1aUxpc3RMYXlvdXRDYXRlZ29yaWVzLlBhZGRpbmcgPSBVRGltLm5ldygwLCA1KQp1aUxpc3RMYXlvdXRDYXRlZ29yaWVzLlNvcnRPcmRlciA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyCgpsb2NhbCBzZWFyY2hCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQpzZWFyY2hCdXR0b24uTmFtZSA9ICJTZWFyY2hCdXR0b24iCnNlYXJjaEJ1dHRvbi5QYXJlbnQgPSBtYWluRnJhbWUKc2VhcmNoQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMzAsIDAsIDMwKQpzZWFyY2hCdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMSwgLTM1LCAwLCA0NSkKc2VhcmNoQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig1NSwgNTUsIDU1KQpzZWFyY2hCdXR0b24uQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKc2VhcmNoQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQpzZWFyY2hCdXR0b24uVGV4dCA9ICLwn5SNIgpzZWFyY2hCdXR0b24uRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zQm9sZApzZWFyY2hCdXR0b24uVGV4dFNpemUgPSAyMApzZWFyY2hCdXR0b24uWkluZGV4ID0gMgoKbG9jYWwgc2VhcmNoVGV4dEJveCA9IEluc3RhbmNlLm5ldygiVGV4dEJveCIpCnNlYXJjaFRleHRCb3guTmFtZSA9ICJTZWFyY2hUZXh0Qm94IgpzZWFyY2hUZXh0Qm94LlBhcmVudCA9IG1haW5GcmFtZQpzZWFyY2hUZXh0Qm94LlNpemUgPSBVRGltMi5uZXcoMSwgLTQwLCAwLCAzMCkKc2VhcmNoVGV4dEJveC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA1LCAwLCA4NSkKc2VhcmNoVGV4dEJveC5QbGFjZWhvbGRlclRleHQgPSAiU2VhcmNoIGluIHRoZSBjdXJyZW50IGNhdGVnb3J5Li4uIgpzZWFyY2hUZXh0Qm94LlRleHRTY2FsZWQgPSB0cnVlCnNlYXJjaFRleHRCb3guQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDQwLCA0MCwgNDApCnNlYXJjaFRleHRCb3guQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKc2VhcmNoVGV4dEJveC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKc2VhcmNoVGV4dEJveC5WaXNpYmxlID0gZmFsc2UKc2VhcmNoVGV4dEJveC5DbGVhclRleHRPbkZvY3VzID0gZmFsc2UKc2VhcmNoVGV4dEJveC5aSW5kZXggPSAyCgpsb2NhbCByZXNpemVCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQpyZXNpemVCdXR0b24uTmFtZSA9ICJSZXNpemVCdXR0b24iCnJlc2l6ZUJ1dHRvbi5QYXJlbnQgPSBtYWluRnJhbWUKcmVzaXplQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMjAsIDAsIDIwKQpyZXNpemVCdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMSwgLTIwLCAxLCAtMjApCnJlc2l6ZUJ1dHRvbi5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDEsIDEpCnJlc2l6ZUJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKcmVzaXplQnV0dG9uLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjcKcmVzaXplQnV0dG9uLkJvcmRlclNpemVQaXhlbCA9IDAKcmVzaXplQnV0dG9uLlRleHQgPSAiIgpyZXNpemVCdXR0b24uWkluZGV4ID0gMTAKCgpsb2NhbCBpc1Jlc2l6aW5nID0gZmFsc2UKbG9jYWwgcmVzaXplQ29ubmVjdGlvbjogUkJYU2NyaXB0Q29ubmVjdGlvbj8KcmVzaXplQnV0dG9uLk1vdXNlQnV0dG9uMURvd246Q29ubmVjdChmdW5jdGlvbigpCiAgICBpc1Jlc2l6aW5nID0gdHJ1ZQogICAgbG9jYWwgc3RhcnRNb3VzZVBvcyA9IFVzZXJJbnB1dFNlcnZpY2U6R2V0TW91c2VMb2NhdGlvbigpCiAgICBsb2NhbCBzdGFydEZyYW1lU2l6ZSA9IG1haW5GcmFtZS5BYnNvbHV0ZVNpemUKCiAgICBpZiByZXNpemVDb25uZWN0aW9uIHRoZW4gcmVzaXplQ29ubmVjdGlvbjpEaXNjb25uZWN0KCkgZW5kCgogICAgcmVzaXplQ29ubmVjdGlvbiA9IFVzZXJJbnB1dFNlcnZpY2UuSW5wdXRDaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCiAgICAgICAgaWYgbm90IGlzUmVzaXppbmcgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgaWYgaW5wdXQuVXNlcklucHV0VHlwZSA9PSBFbnVtLlVzZXJJbnB1dFR5cGUuTW91c2VNb3ZlbWVudCB0aGVuCiAgICAgICAgICAgIGxvY2FsIGN1cnJlbnRNb3VzZVBvcyA9IFVzZXJJbnB1dFNlcnZpY2U6R2V0TW91c2VMb2NhdGlvbigpCiAgICAgICAgICAgIGxvY2FsIGRlbHRhID0gY3VycmVudE1vdXNlUG9zIC0gc3RhcnRNb3VzZVBvcwogICAgICAgICAgICBsb2NhbCBuZXdTaXplID0gc3RhcnRGcmFtZVNpemUgKyBkZWx0YQogICAgICAgICAgICBsb2NhbCBtaW5XaWR0aCA9IDMwMAogICAgICAgICAgICBsb2NhbCBtaW5IZWlnaHQgPSAyNTAKICAgICAgICAgICAgbWFpbkZyYW1lLlNpemUgPSBVRGltMi5uZXcoMCwgbWF0aC5tYXgobmV3U2l6ZS5YLCBtaW5XaWR0aCksIDAsIG1hdGgubWF4KG5ld1NpemUuWSwgbWluSGVpZ2h0KSkKICAgICAgICBlbmQKICAgIGVuZCkKZW5kKQoKVXNlcklucHV0U2VydmljZS5JbnB1dEVuZGVkOkNvbm5lY3QoZnVuY3Rpb24oaW5wdXQpCiAgICBpZiBpbnB1dC5Vc2VySW5wdXRUeXBlID09IEVudW0uVXNlcklucHV0VHlwZS5Nb3VzZUJ1dHRvbjEgdGhlbgogICAgICAgIGlmIGlzUmVzaXppbmcgdGhlbgogICAgICAgICAgICBpc1Jlc2l6aW5nID0gZmFsc2UKICAgICAgICAgICAgaWYgcmVzaXplQ29ubmVjdGlvbiB0aGVuCiAgICAgICAgICAgICAgICByZXNpemVDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICAgcmVzaXplQ29ubmVjdGlvbiA9IG5pbAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQpCgoKCgpsb2NhbCBmdW5jdGlvbiBzdG9wTW92ZW1lbnRBbmltYXRpb25PdmVycmlkZSgpCiAgICBpZiBtb3ZlbWVudEFuaW1Db25uZWN0aW9uIHRoZW4KICAgICAgICBtb3ZlbWVudEFuaW1Db25uZWN0aW9uOkRpc2Nvbm5lY3QoKQogICAgICAgIG1vdmVtZW50QW5pbUNvbm5lY3Rpb24gPSBuaWwKICAgIGVuZAogICAgaWYgY3VycmVudE1vdmVtZW50QW5pbVRyYWNrIHRoZW4KICAgICAgICBjdXJyZW50TW92ZW1lbnRBbmltVHJhY2s6U3RvcCgpCiAgICAgICAgY3VycmVudE1vdmVtZW50QW5pbVRyYWNrOkRlc3Ryb3koKQogICAgICAgIGN1cnJlbnRNb3ZlbWVudEFuaW1UcmFjayA9IG5pbAogICAgZW5kCiAgICBhY3RpdmVNb3ZlbWVudEFuaW1zID0gbmlsCmVuZAoKbG9jYWwgZnVuY3Rpb24gc3RhcnRNb3ZlbWVudEFuaW1hdGlvbk92ZXJyaWRlKGFuaW1TZXQ6IHRhYmxlKQogICAgc3RvcE1vdmVtZW50QW5pbWF0aW9uT3ZlcnJpZGUoKQoKICAgIAogICAgaWYgbm90IGFuaW1TZXQgb3Igbm90IGFuaW1TZXQuSWRsZSBvciBub3QgYW5pbVNldC5XYWxrIG9yIG5vdCBhbmltU2V0LlNwcmludCB0aGVuCiAgICAgICAgd2FybigiREVCVUc6INCjINCy0YvQsdGA0LDQvdC90L7Qs9C+INC90LDQsdC+0YDQsCDQvdC10YIg0L3QtdC+0LHRhdC+0LTQuNC80YvRhSDQsNC90LjQvNCw0YbQuNC5IElkbGUsIFdhbGsg0LggU3ByaW50LiIpCiAgICAgICAgcmV0dXJuCiAgICBlbmQKCgkKICAgIGlmIGN1cnJlbnRDYXRlZ29yeSA9PSAiS2lsbGVyIEFuaW1hdGlvbnMiIG9yIGN1cnJlbnRDYXRlZ29yeSA9PSAiS2lsbGVyLVNraW5zIEFuaW0iIHRoZW4KCQlpZiBub3QgaXNBdXRvQW5pbXNFbmFibGVkIHRoZW4gcmV0dXJuIGVuZAoJCgllbHNlaWYgY3VycmVudENhdGVnb3J5ID09ICJTdXJ2aXZvcnMgQW5pbWF0aW9ucyIgdGhlbgoJCWlmIG5vdCBpc1N1cnZpdm9yQXV0b0FuaW1zRW5hYmxlZCBhbmQgbm90IGlzU3Vydml2b3JIdXJ0QW5pbXNFbmFibGVkIHRoZW4gcmV0dXJuIGVuZAoJZW5kCgogICAgYWN0aXZlTW92ZW1lbnRBbmltcyA9IHt9CglpZiBjdXJyZW50Q2F0ZWdvcnkgPT0gIlN1cnZpdm9ycyBBbmltYXRpb25zIiBhbmQgaXNTdXJ2aXZvckh1cnRBbmltc0VuYWJsZWQgdGhlbgoJCQoJCWFjdGl2ZU1vdmVtZW50QW5pbXMuSWRsZSA9IGFuaW1TZXQuSHVydElkbGUgb3IgYW5pbVNldC5JZGxlCgkJYWN0aXZlTW92ZW1lbnRBbmltcy5XYWxrID0gYW5pbVNldC5IdXJ0V2FsayBvciBhbmltU2V0LldhbGsKCQkKCQlhY3RpdmVNb3ZlbWVudEFuaW1zLlNwcmludCA9IGFuaW1TZXQuSHVydFNwcmludCBvciBhbmltU2V0LlNwcmludAoJZWxzZQoJCQoJCWFjdGl2ZU1vdmVtZW50QW5pbXMuSWRsZSA9IGFuaW1TZXQuSWRsZQoJCWFjdGl2ZU1vdmVtZW50QW5pbXMuV2FsayA9IGFuaW1TZXQuV2FsawoJCQoJCWFjdGl2ZU1vdmVtZW50QW5pbXMuU3ByaW50ID0gYW5pbVNldC5TcHJpbnQKCWVuZAoKICAgIG1vdmVtZW50QW5pbUNvbm5lY3Rpb24gPSBSdW5TZXJ2aWNlLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgaWYgbm90IGh1bWFub2lkIG9yIG5vdCBhY3RpdmVNb3ZlbWVudEFuaW1zIG9yIG5vdCBtYWluRnJhbWUuVmlzaWJsZSB0aGVuCiAgICAgICAgICAgIHN0b3BNb3ZlbWVudEFuaW1hdGlvbk92ZXJyaWRlKCkKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZW5kCgogICAgICAgIGxvY2FsIGlzTW92aW5nID0gaHVtYW5vaWQuTW92ZURpcmVjdGlvbi5NYWduaXR1ZGUgPiAwCiAgICAgICAgbG9jYWwgdGFyZ2V0QW5pbUlkOiBzdHJpbmc/ID0gbmlsCgogICAgICAgIGlmIG5vdCBpc01vdmluZyB0aGVuCiAgICAgICAgICAgIHRhcmdldEFuaW1JZCA9IGFjdGl2ZU1vdmVtZW50QW5pbXMuSWRsZQogICAgICAgIGVsc2UKICAgICAgICAgICAgaWYgaHVtYW5vaWQuV2Fsa1NwZWVkID49IDIzIHRoZW4gCiAgICAgICAgICAgICAgICB0YXJnZXRBbmltSWQgPSBhY3RpdmVNb3ZlbWVudEFuaW1zLlNwcmludAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB0YXJnZXRBbmltSWQgPSBhY3RpdmVNb3ZlbWVudEFuaW1zLldhbGsKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIGlmIHRhcmdldEFuaW1JZCB0aGVuCiAgICAgICAgICAgIGlmIGN1cnJlbnRNb3ZlbWVudEFuaW1UcmFjayBhbmQgY3VycmVudE1vdmVtZW50QW5pbVRyYWNrLkFuaW1hdGlvbiBhbmQgY3VycmVudE1vdmVtZW50QW5pbVRyYWNrLkFuaW1hdGlvbi5BbmltYXRpb25JZCA9PSB0YXJnZXRBbmltSWQgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgaWYgY3VycmVudE1vdmVtZW50QW5pbVRyYWNrIHRoZW4KICAgICAgICAgICAgICAgIGN1cnJlbnRNb3ZlbWVudEFuaW1UcmFjazpTdG9wKCkKCQkJCWN1cnJlbnRNb3ZlbWVudEFuaW1UcmFjazpEZXN0cm95KCkKICAgICAgICAgICAgZW5kCgogICAgICAgICAgICBsb2NhbCBhbmltYXRpb24gPSBJbnN0YW5jZS5uZXcoIkFuaW1hdGlvbiIpCiAgICAgICAgICAgIGFuaW1hdGlvbi5BbmltYXRpb25JZCA9IHRhcmdldEFuaW1JZAogICAgICAgICAgICBjdXJyZW50TW92ZW1lbnRBbmltVHJhY2sgPSBodW1hbm9pZDpMb2FkQW5pbWF0aW9uKGFuaW1hdGlvbikKICAgICAgICAgICAgY3VycmVudE1vdmVtZW50QW5pbVRyYWNrOlBsYXkoKQogICAgICAgIGVuZAogICAgZW5kKQplbmQKCgpsb2NhbCBhY3RpdmVFbW90ZXM6IHtbSHVtYW5vaWRdOiB7YW5pbWF0aW9uVHJhY2s6IEFuaW1hdGlvblRyYWNrfX0gPSB7fQoKbG9jYWwgZnVuY3Rpb24gc3RvcEVtb3RlRm9ySHVtYW5vaWQodGFyZ2V0SHVtYW5vaWQ6IEh1bWFub2lkKQoJbG9jYWwgZW1vdGVEYXRhID0gYWN0aXZlRW1vdGVzW3RhcmdldEh1bWFub2lkXQoJaWYgZW1vdGVEYXRhIGFuZCBlbW90ZURhdGEuYW5pbWF0aW9uVHJhY2sgdGhlbgoJCWVtb3RlRGF0YS5hbmltYXRpb25UcmFjazpTdG9wKCkKCQllbW90ZURhdGEuYW5pbWF0aW9uVHJhY2s6RGVzdHJveSgpCgllbmQKCWFjdGl2ZUVtb3Rlc1t0YXJnZXRIdW1hbm9pZF0gPSBuaWwKZW5kCgpsb2NhbCBmdW5jdGlvbiBzdG9wQWxsRW1vdGVzKCkKCWlmIGh1bWFub2lkIHRoZW4KCQlzdG9wRW1vdGVGb3JIdW1hbm9pZChodW1hbm9pZCkKCWVuZAoJYWN0aXZlRW1vdGVzID0ge30KZW5kCgpsb2NhbCBmdW5jdGlvbiBwbGF5TG9jYWxBbmltYXRpb24odGFyZ2V0SHVtYW5vaWQ6IEh1bWFub2lkLCBhbmltYXRpb25JZDogc3RyaW5nKQogICAgc3RvcEVtb3RlRm9ySHVtYW5vaWQodGFyZ2V0SHVtYW5vaWQpCgogICAgaWYgdHlwZShhbmltYXRpb25JZCkgfj0gInN0cmluZyIgb3Igbm90IHN0cmluZy5maW5kKGFuaW1hdGlvbklkLCAicmJ4YXNzZXRpZCIpIHRoZW4KCQl3YXJuKCJERUJVRzog0J3QtdC60L7RgNGA0LXQutGC0L3Ri9C5IGFuaW1hdGlvbklkOiIsIHRvc3RyaW5nKGFuaW1hdGlvbklkKSkKCQlyZXR1cm4KCWVuZAoKICAgIGxvY2FsIGFuaW1hdGlvbiA9IEluc3RhbmNlLm5ldygiQW5pbWF0aW9uIikKICAgIGFuaW1hdGlvbi5BbmltYXRpb25JZCA9IGFuaW1hdGlvbklkCiAgICBsb2NhbCBhbmltYXRpb25UcmFjayA9IHRhcmdldEh1bWFub2lkOkxvYWRBbmltYXRpb24oYW5pbWF0aW9uKQogICAgYW5pbWF0aW9uVHJhY2s6UGxheSgpCgogICAgYWN0aXZlRW1vdGVzW3RhcmdldEh1bWFub2lkXSA9IHthbmltYXRpb25UcmFjayA9IGFuaW1hdGlvblRyYWNrfQoKCWFuaW1hdGlvblRyYWNrLlN0b3BwZWQ6Q29ubmVjdChmdW5jdGlvbigpCgkJdGFzay53YWl0KCkKCQlpZiBhY3RpdmVFbW90ZXNbdGFyZ2V0SHVtYW5vaWRdIGFuZCBhY3RpdmVFbW90ZXNbdGFyZ2V0SHVtYW5vaWRdLmFuaW1hdGlvblRyYWNrID09IGFuaW1hdGlvblRyYWNrIHRoZW4KCQkJc3RvcEVtb3RlRm9ySHVtYW5vaWQodGFyZ2V0SHVtYW5vaWQpCgkJZW5kCgkJYW5pbWF0aW9uOkRlc3Ryb3koKQoJZW5kKQplbmQKCmxvY2FsIGZ1bmN0aW9uIHVwZGF0ZUNhbnZhc1NpemUodGFyZ2V0RnJhbWU6IFNjcm9sbGluZ0ZyYW1lLCB0YXJnZXRMYXlvdXQ6IFVJTGlzdExheW91dCkKICAgIGlmIG5vdCB0YXJnZXRGcmFtZSBvciBub3QgdGFyZ2V0TGF5b3V0IHRoZW4gcmV0dXJuIGVuZAogICAgdGFzay53YWl0KDAuMSkKICAgIGxvY2FsIGNvbnRlbnRTaXplID0gdGFyZ2V0TGF5b3V0LkFic29sdXRlQ29udGVudFNpemUKICAgIHRhcmdldEZyYW1lLkNhbnZhc1NpemUgPSBVRGltMi5uZXcoMCwgMCwgMCwgY29udGVudFNpemUuWSArIDEwKQplbmQKCgpsb2NhbCBmdW5jdGlvbiBmaWx0ZXJCdXR0b25zKHNlYXJjaFRleHQ6IHN0cmluZykKICAgIGxvY2FsIGxvd2VyU2VhcmNoVGV4dCA9IHNlYXJjaFRleHQ6bG93ZXIoKQogICAgbG9jYWwgdGFyZ2V0QnV0dG9ucyA9IG5pbAogICAgbG9jYWwgdGFyZ2V0U2Nyb2xsaW5nRnJhbWUgPSBuaWwKICAgIGxvY2FsIHRhcmdldFVJTGlzdExheW91dCA9IG5pbAoKCWxvY2FsIGFuaW1EYXRhID0gY2F0ZWdvcnlEYXRhW2N1cnJlbnRDYXRlZ29yeV0KCiAgICBpZiBjdXJyZW50Q2F0ZWdvcnkgPT0gIktpbGxlciBBbmltYXRpb25zIiBvciBjdXJyZW50Q2F0ZWdvcnkgPT0gIlN1cnZpdm9ycyBBbmltYXRpb25zIiB0aGVuCiAgICAgICAgaWYgY3VycmVudFN1YkNhdGVnb3J5IHRoZW4KICAgICAgICAgICAgdGFyZ2V0QnV0dG9ucyA9IGFuaW1EYXRhLnN1YkNhdGVnb3JpZXNbY3VycmVudFN1YkNhdGVnb3J5XS5idXR0b25zCiAgICAgICAgICAgIHRhcmdldFNjcm9sbGluZ0ZyYW1lID0gYW5pbURhdGEuY3VycmVudFN1YkNhdGVnb3J5RnJhbWUKICAgICAgICAgICAgdGFyZ2V0VUlMaXN0TGF5b3V0ID0gYW5pbURhdGEuY3VycmVudFN1YkNhdGVnb3J5TGF5b3V0CiAgICAgICAgZWxzZQogICAgICAgICAgICB0YXJnZXRCdXR0b25zID0gYW5pbURhdGEuYnV0dG9ucwogICAgICAgICAgICB0YXJnZXRTY3JvbGxpbmdGcmFtZSA9IGFuaW1EYXRhLnNjcm9sbGluZ0ZyYW1lCiAgICAgICAgICAgIHRhcmdldFVJTGlzdExheW91dCA9IGFuaW1EYXRhLnVpTGlzdExheW91dAogICAgICAgIGVuZAoJZWxzZWlmIGN1cnJlbnRDYXRlZ29yeSA9PSAiS2lsbGVyLVNraW5zIEFuaW0iIHRoZW4KCQlpZiBjdXJyZW50U2tpbk5hbWUgdGhlbgoJCQl0YXJnZXRCdXR0b25zID0gYW5pbURhdGEuc2tpblN1YkNhdGVnb3JpZXNbY3VycmVudFN1YkNhdGVnb3J5XVtjdXJyZW50U2tpbk5hbWVdLmJ1dHRvbnMKCQkJdGFyZ2V0U2Nyb2xsaW5nRnJhbWUgPSBhbmltRGF0YS5jdXJyZW50U2tpbkZyYW1lCgkJCXRhcmdldFVJTGlzdExheW91dCA9IGFuaW1EYXRhLmN1cnJlbnRTa2luTGF5b3V0CgkJZWxzZWlmIGN1cnJlbnRTdWJDYXRlZ29yeSB0aGVuCgkJCXRhcmdldEJ1dHRvbnMgPSBhbmltRGF0YS5zdWJDYXRlZ29yaWVzW2N1cnJlbnRTdWJDYXRlZ29yeV0uYnV0dG9ucwoJCQl0YXJnZXRTY3JvbGxpbmdGcmFtZSA9IGFuaW1EYXRhLmN1cnJlbnRTdWJDYXRlZ29yeUZyYW1lCgkJCXRhcmdldFVJTGlzdExheW91dCA9IGFuaW1EYXRhLmN1cnJlbnRTdWJDYXRlZ29yeUxheW91dAoJCWVsc2UKCQkJdGFyZ2V0QnV0dG9ucyA9IGFuaW1EYXRhLmJ1dHRvbnMKCQkJdGFyZ2V0U2Nyb2xsaW5nRnJhbWUgPSBhbmltRGF0YS5zY3JvbGxpbmdGcmFtZQoJCQl0YXJnZXRVSUxpc3RMYXlvdXQgPSBhbmltRGF0YS51aUxpc3RMYXlvdXQKCQllbmQKICAgIGVuZAoKICAgIGlmIG5vdCB0YXJnZXRCdXR0b25zIHRoZW4gcmV0dXJuIGVuZAoKICAgIGZvciBfLCBidXR0b24gaW4gcGFpcnModGFyZ2V0QnV0dG9ucykgZG8KICAgICAgICBsb2NhbCBidXR0b25UZXh0ID0gYnV0dG9uLlRleHQ6bG93ZXIoKQogICAgICAgIGlmIHN0cmluZy5maW5kKGJ1dHRvblRleHQsIGxvd2VyU2VhcmNoVGV4dCkgdGhlbgogICAgICAgICAgICBidXR0b24uVmlzaWJsZSA9IHRydWUKICAgICAgICBlbHNlCiAgICAgICAgICAgIGJ1dHRvbi5WaXNpYmxlID0gZmFsc2UKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGlmIHRhcmdldFNjcm9sbGluZ0ZyYW1lIGFuZCB0YXJnZXRVSUxpc3RMYXlvdXQgdGhlbgogICAgICAgIHVwZGF0ZUNhbnZhc1NpemUodGFyZ2V0U2Nyb2xsaW5nRnJhbWUsIHRhcmdldFVJTGlzdExheW91dCkKICAgIGVuZAplbmQKCgpsb2NhbCBmdW5jdGlvbiBjcmVhdGVLaWxsZXJBdXRvQW5pbXNCdXR0b24ocGFyZW50RnJhbWU6IEd1aU9iamVjdCwgYW5pbVNldDogdGFibGUpCiAgICBsb2NhbCBhdXRvQW5pbXNCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQogICAgYXV0b0FuaW1zQnV0dG9uLk5hbWUgPSAiQXV0b0FuaW1zQnV0dG9uIgogICAgYXV0b0FuaW1zQnV0dG9uLlBhcmVudCA9IHBhcmVudEZyYW1lCiAgICBhdXRvQW5pbXNCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygxLCAtMTAsIDAsIDQwKQogICAgYXV0b0FuaW1zQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig0MCwgODAsIDEyMCkKICAgIGF1dG9Bbmltc0J1dHRvbi5Cb3JkZXJDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgYXV0b0FuaW1zQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgYXV0b0FuaW1zQnV0dG9uLlRleHQgPSAiQXV0b0FuaW1zICgiIC4uIChpc0F1dG9Bbmltc0VuYWJsZWQgYW5kICJPbiIgb3IgIk9mZiIpIC4uICIpIgogICAgYXV0b0FuaW1zQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgIGF1dG9Bbmltc0J1dHRvbi5UZXh0U2l6ZSA9IDE4CiAgICBhdXRvQW5pbXNCdXR0b24uTGF5b3V0T3JkZXIgPSAtMTAwIAoKICAgIGF1dG9Bbmltc0J1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICBpc0F1dG9Bbmltc0VuYWJsZWQgPSBub3QgaXNBdXRvQW5pbXNFbmFibGVkCiAgICAgICAgYXV0b0FuaW1zQnV0dG9uLlRleHQgPSAiQXV0b0FuaW1zICgiIC4uIChpc0F1dG9Bbmltc0VuYWJsZWQgYW5kICJPbiIgb3IgIk9mZiIpIC4uICIpIgogICAgICAgIGlmIGlzQXV0b0FuaW1zRW5hYmxlZCB0aGVuCiAgICAgICAgICAgIHN0YXJ0TW92ZW1lbnRBbmltYXRpb25PdmVycmlkZShhbmltU2V0KQogICAgICAgIGVsc2UKICAgICAgICAgICAgc3RvcE1vdmVtZW50QW5pbWF0aW9uT3ZlcnJpZGUoKQogICAgICAgIGVuZAogICAgZW5kKQoJcmV0dXJuIGF1dG9Bbmltc0J1dHRvbgplbmQKCgpsb2NhbCBmdW5jdGlvbiBjcmVhdGVTdXJ2aXZvckF1dG9Bbmltc0J1dHRvbnMocGFyZW50RnJhbWU6IEd1aU9iamVjdCwgYW5pbVNldDogdGFibGUpCglsb2NhbCBidXR0b25zQ29udGFpbmVyID0ge30KCQogICAgbG9jYWwgYXV0b0FuaW1zQnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKICAgIGF1dG9Bbmltc0J1dHRvbi5OYW1lID0gIkF1dG9Bbmltc0J1dHRvbiIKICAgIGF1dG9Bbmltc0J1dHRvbi5QYXJlbnQgPSBwYXJlbnRGcmFtZQogICAgYXV0b0FuaW1zQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMC41LCAtNywgMCwgNDApIAogICAgYXV0b0FuaW1zQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig0MCwgODAsIDEyMCkKICAgIGF1dG9Bbmltc0J1dHRvbi5Cb3JkZXJDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgYXV0b0FuaW1zQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgYXV0b0FuaW1zQnV0dG9uLlRleHQgPSAiQXV0b0FuaW1zIChPZmYpIgogICAgYXV0b0FuaW1zQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgIGF1dG9Bbmltc0J1dHRvbi5UZXh0U2l6ZSA9IDE2CiAgICBhdXRvQW5pbXNCdXR0b24uTGF5b3V0T3JkZXIgPSAtMTAwCgoJbG9jYWwgYXV0b0h1cnRBbmltc0J1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCiAgICBhdXRvSHVydEFuaW1zQnV0dG9uLk5hbWUgPSAiQXV0b0h1cnRBbmltc0J1dHRvbiIKICAgIGF1dG9IdXJ0QW5pbXNCdXR0b24uUGFyZW50ID0gcGFyZW50RnJhbWUKICAgIGF1dG9IdXJ0QW5pbXNCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLjUsIC04LCAwLCA0MCkgCglhdXRvSHVydEFuaW1zQnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLTIsIDAsIDApCiAgICBhdXRvSHVydEFuaW1zQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxMjAsIDQwLCA0MCkKICAgIGF1dG9IdXJ0QW5pbXNCdXR0b24uQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKICAgIGF1dG9IdXJ0QW5pbXNCdXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCiAgICBhdXRvSHVydEFuaW1zQnV0dG9uLlRleHQgPSAiQXV0b0h1cnRBbmltcyAoT2ZmKSIKICAgIGF1dG9IdXJ0QW5pbXNCdXR0b24uRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zQm9sZAogICAgYXV0b0h1cnRBbmltc0J1dHRvbi5UZXh0U2l6ZSA9IDE2CiAgICBhdXRvSHVydEFuaW1zQnV0dG9uLkxheW91dE9yZGVyID0gLTk5CgogICAgYXV0b0FuaW1zQnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgIGlzU3Vydml2b3JBdXRvQW5pbXNFbmFibGVkID0gbm90IGlzU3Vydml2b3JBdXRvQW5pbXNFbmFibGVkCgkJaWYgaXNTdXJ2aXZvckF1dG9Bbmltc0VuYWJsZWQgdGhlbgoJCQlpc1N1cnZpdm9ySHVydEFuaW1zRW5hYmxlZCA9IGZhbHNlIAoJCWVuZAoJCQogICAgICAgIGF1dG9Bbmltc0J1dHRvbi5UZXh0ID0gIkF1dG9BbmltcyAoIiAuLiAoaXNTdXJ2aXZvckF1dG9Bbmltc0VuYWJsZWQgYW5kICJPbiIgb3IgIk9mZiIpIC4uICIpIgoJCWF1dG9IdXJ0QW5pbXNCdXR0b24uVGV4dCA9ICJBdXRvSHVydEFuaW1zIChPZmYpIgoKICAgICAgICBpZiBpc1N1cnZpdm9yQXV0b0FuaW1zRW5hYmxlZCB0aGVuCiAgICAgICAgICAgIHN0YXJ0TW92ZW1lbnRBbmltYXRpb25PdmVycmlkZShhbmltU2V0KQogICAgICAgIGVsc2UKICAgICAgICAgICAgc3RvcE1vdmVtZW50QW5pbWF0aW9uT3ZlcnJpZGUoKQogICAgICAgIGVuZAogICAgZW5kKQoJCglhdXRvSHVydEFuaW1zQnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgIGlzU3Vydml2b3JIdXJ0QW5pbXNFbmFibGVkID0gbm90IGlzU3Vydml2b3JIdXJ0QW5pbXNFbmFibGVkCgkJaWYgaXNTdXJ2aXZvckh1cnRBbmltc0VuYWJsZWQgdGhlbgoJCQlpc1N1cnZpdm9yQXV0b0FuaW1zRW5hYmxlZCA9IGZhbHNlIAoJCWVuZAoJCQogICAgICAgIGF1dG9IdXJ0QW5pbXNCdXR0b24uVGV4dCA9ICJBdXRvSHVydEFuaW1zICgiIC4uIChpc1N1cnZpdm9ySHVydEFuaW1zRW5hYmxlZCBhbmQgIk9uIiBvciAiT2ZmIikgLi4gIikiCgkJYXV0b0FuaW1zQnV0dG9uLlRleHQgPSAiQXV0b0FuaW1zIChPZmYpIgoJCQogICAgICAgIGlmIGlzU3Vydml2b3JIdXJ0QW5pbXNFbmFibGVkIHRoZW4KICAgICAgICAgICAgc3RhcnRNb3ZlbWVudEFuaW1hdGlvbk92ZXJyaWRlKGFuaW1TZXQpCiAgICAgICAgZWxzZQogICAgICAgICAgICBzdG9wTW92ZW1lbnRBbmltYXRpb25PdmVycmlkZSgpCiAgICAgICAgZW5kCiAgICBlbmQpCgoJdGFibGUuaW5zZXJ0KGJ1dHRvbnNDb250YWluZXIsIGF1dG9Bbmltc0J1dHRvbikKCXRhYmxlLmluc2VydChidXR0b25zQ29udGFpbmVyLCBhdXRvSHVydEFuaW1zQnV0dG9uKQoJcmV0dXJuIGJ1dHRvbnNDb250YWluZXIKZW5kCgoKCmxvY2FsIGZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGlvbkJ1dHRvbnMocGFyZW50RnJhbWUsIGFuaW1hdGlvblRhYmxlLCBidXR0b25MaXN0VGFibGUpCiAgICBmb3IgYW5pbU5hbWUsIGFuaW1JZCBpbiBwYWlycyhhbmltYXRpb25UYWJsZSkgZG8KICAgICAgICBsb2NhbCBzaG91bGRTa2lwID0gZmFsc2UKICAgICAgICAKICAgICAgICBpZiBhbmltTmFtZSA9PSAiSWRsZSIgb3IgYW5pbU5hbWUgPT0gIldhbGsiIG9yIGFuaW1OYW1lID09ICJTcHJpbnQiIG9yCiAgICAgICAgICAgYW5pbU5hbWUgPT0gIkh1cnRJZGxlIiBvciBhbmltTmFtZSA9PSAiSHVydFdhbGsiIG9yIGFuaW1OYW1lID09ICJIdXJ0U3ByaW50IiB0aGVuCiAgICAgICAgICAgIHNob3VsZFNraXAgPSB0cnVlCiAgICAgICAgZW5kCgkJCiAgICAgICAgaWYgbm90IHNob3VsZFNraXAgdGhlbgoJCQlsb2NhbCBidXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQoJCQlidXR0b24uTmFtZSA9IGFuaW1OYW1lIC4uICJCdXR0b24iCgkJCWJ1dHRvbi5QYXJlbnQgPSBwYXJlbnRGcmFtZQoJCQlidXR0b24uU2l6ZSA9IFVEaW0yLm5ldygxLCAtMTAsIDAsIDQwKQoJCQlidXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDYwLCA2MCwgNjApCgkJCWJ1dHRvbi5Cb3JkZXJDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQoJCQlidXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCgkJCWJ1dHRvbi5UZXh0ID0gYW5pbU5hbWUKCQkJYnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKCQkJYnV0dG9uLlRleHRTaXplID0gMTgKCgkJCWJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKCQkJCWlmIGh1bWFub2lkIGFuZCBjaGFyYWN0ZXIgdGhlbgoJCQkJCXBsYXlMb2NhbEFuaW1hdGlvbihodW1hbm9pZCwgYW5pbUlkKQoJCQkJZWxzZQoJCQkJCXdhcm4oIkRFQlVHOiDQndC10LLQvtC30LzQvtC20L3QviDQstC+0YHQv9GA0L7QuNC30LLQtdGB0YLQuCDQsNC90LjQvNCw0YbQuNGOLCDQs9GD0LzQsNC90L7QuNC0INC40LvQuCDQv9C10YDRgdC+0L3QsNC2INGA0LDQstC10L0gbmlsLiIpCgkJCQllbmQKCQkJZW5kKQoJCQl0YWJsZS5pbnNlcnQoYnV0dG9uTGlzdFRhYmxlLCBidXR0b24pCgkJZW5kCiAgICBlbmQKZW5kCgoKCgpsb2NhbCBiYWNrRnVuY3Rpb25TdGFjayA9IHt9CmxvY2FsIGJhY2tCdXR0b24KCmxvY2FsIGZ1bmN0aW9uIGNsZWFyQmFja1N0YWNrKCkKCWZvciBpID0gMSwgI2JhY2tGdW5jdGlvblN0YWNrIGRvCgkJYmFja0Z1bmN0aW9uU3RhY2tbaV0gPSBuaWwKCWVuZAoJYmFja0J1dHRvbi5WaXNpYmxlID0gZmFsc2UKZW5kCgpsb2NhbCBmdW5jdGlvbiBwdXNoQmFja0Z1bmN0aW9uKGZ1bmMpCgl0YWJsZS5pbnNlcnQoYmFja0Z1bmN0aW9uU3RhY2ssIGZ1bmMpCgliYWNrQnV0dG9uLlZpc2libGUgPSB0cnVlCmVuZAoKbG9jYWwgZnVuY3Rpb24gZXhlY3V0ZUJhY2tGdW5jdGlvbigpCglpZiAjYmFja0Z1bmN0aW9uU3RhY2sgPiAwIHRoZW4KCQlsb2NhbCBmdW5jID0gdGFibGUucmVtb3ZlKGJhY2tGdW5jdGlvblN0YWNrKQoJCWlmIGZ1bmMgdGhlbgoJCQlmdW5jKCkKCQllbmQKCWVuZAoJaWYgI2JhY2tGdW5jdGlvblN0YWNrID09IDAgdGhlbgoJCWJhY2tCdXR0b24uVmlzaWJsZSA9IGZhbHNlCgllbmQKZW5kCgoKCgoKCmxvY2FsIGZ1bmN0aW9uIGV4dHJhY3RBbmltYXRpb25zRnJvbUZvbGRlcihmb2xkZXI6IEZvbGRlcik6IHsgW3N0cmluZ106IHN0cmluZyB9CiAgICBsb2NhbCBhbmltcyA9IHt9CiAgICBpZiBub3QgZm9sZGVyIHRoZW4gcmV0dXJuIGFuaW1zIGVuZAogICAgZm9yIF8sIGl0ZW0gaW4gaXBhaXJzKGZvbGRlcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgIAogICAgICAgIGlmIGl0ZW06SXNBKCJBbmltYXRpb24iKSBhbmQgaXRlbS5BbmltYXRpb25JZCBhbmQgaXRlbS5BbmltYXRpb25JZCB+PSAiIiB0aGVuCiAgICAgICAgICAgIGFuaW1zW2l0ZW0uTmFtZV0gPSBpdGVtLkFuaW1hdGlvbklkCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiBhbmltcwplbmQKCgpsb2NhbCBmdW5jdGlvbiBkaXNjb3ZlckFsbEtpbGxlckRhdGEoKQogICAgbG9jYWwgYWxsRGF0YSA9IHsKICAgICAgICBLaWxsZXJzID0ge30sCiAgICAgICAgU2tpbnMgPSB7fQogICAgfQogICAgaWYgbm90IGtpbGxlckNoYXJhY3RlcnNGb2xkZXIgdGhlbgogICAgICAgIHdhcm4oItCf0LDQv9C60LAgUmVwbGljYXRlZFN0b3JhZ2UuQ2hhcmFjdGVycy5LaWxsZXIg0L3QtSDQvdCw0LnQtNC10L3QsCEiKQogICAgICAgIHJldHVybiBhbGxEYXRhCiAgICBlbmQKCiAgICBmb3IgXywga2lsbGVyRm9sZGVyIGluIGlwYWlycyhraWxsZXJDaGFyYWN0ZXJzRm9sZGVyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgaWYga2lsbGVyRm9sZGVyOklzQSgiTW9kZWwiKSBvciBraWxsZXJGb2xkZXI6SXNBKCJGb2xkZXIiKSB0aGVuCiAgICAgICAgICAgIGxvY2FsIGtpbGxlck5hbWUgPSBraWxsZXJGb2xkZXIuTmFtZQogICAgICAgICAgICBhbGxEYXRhLlNraW5zW2tpbGxlck5hbWVdID0ge30KCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBkZWZhdWx0Rm9sZGVyID0ga2lsbGVyRm9sZGVyOkZpbmRGaXJzdENoaWxkKCJEZWZhdWx0IikKICAgICAgICAgICAgbG9jYWwgZGVmYXVsdEFuaW1zRm9sZGVyID0gZGVmYXVsdEZvbGRlciBhbmQgZGVmYXVsdEZvbGRlcjpGaW5kRmlyc3RDaGlsZCgiQW5pbWF0aW9ucyIpCiAgICAgICAgICAgIGxvY2FsIGRlZmF1bHRBbmltcyA9IGV4dHJhY3RBbmltYXRpb25zRnJvbUZvbGRlcihkZWZhdWx0QW5pbXNGb2xkZXIpCiAgICAgICAgICAgIGFsbERhdGEuS2lsbGVyc1traWxsZXJOYW1lXSA9IGRlZmF1bHRBbmltcwoKICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciBfLCBza2luRm9sZGVyIGluIGlwYWlycyhraWxsZXJGb2xkZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgIGlmIChza2luRm9sZGVyOklzQSgiTW9kZWwiKSBvciBza2luRm9sZGVyOklzQSgiRm9sZGVyIikpIGFuZCBza2luRm9sZGVyLk5hbWUgfj0gIkRlZmF1bHQiIHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCBza2luTmFtZSA9IHNraW5Gb2xkZXIuTmFtZQogICAgICAgICAgICAgICAgICAgIGxvY2FsIHNraW5Bbmltc0ZvbGRlciA9IHNraW5Gb2xkZXI6RmluZEZpcnN0Q2hpbGQoIkFuaW1hdGlvbnMiKQogICAgICAgICAgICAgICAgICAgIGxvY2FsIHNraW5BbmltcyA9IGV4dHJhY3RBbmltYXRpb25zRnJvbUZvbGRlcihza2luQW5pbXNGb2xkZXIpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgZmluYWxTa2luQW5pbXMgPSB7fQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciBhbmltTmFtZSwgYW5pbUlkIGluIHBhaXJzKGRlZmF1bHRBbmltcykgZG8KICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxTa2luQW5pbXNbYW5pbU5hbWVdID0gYW5pbUlkCiAgICAgICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgICAgIGxvY2FsIGhhc1VuaXF1ZSA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgZm9yIGFuaW1OYW1lLCBza2luQW5pbUlkIGluIHBhaXJzKHNraW5BbmltcykgZG8KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGRlZmF1bHRBbmltc1thbmltTmFtZV0gfj0gc2tpbkFuaW1JZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNVbmlxdWUgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFNraW5Bbmltc1thbmltTmFtZV0gPSBza2luQW5pbUlkIAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIGhhc1VuaXF1ZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGFsbERhdGEuU2tpbnNba2lsbGVyTmFtZV1bc2tpbk5hbWVdID0gZmluYWxTa2luQW5pbXMKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIGFsbERhdGEKZW5kCgoKbG9jYWwgZnVuY3Rpb24gZGlzY292ZXJBbGxTdXJ2aXZvckRhdGEoKQogICAgbG9jYWwgYWxsRGF0YSA9IHt9CiAgICBpZiBub3Qgc3Vydml2b3JDaGFyYWN0ZXJzRm9sZGVyIHRoZW4KICAgICAgICB3YXJuKCLQn9Cw0L/QutCwIFJlcGxpY2F0ZWRTdG9yYWdlLkNoYXJhY3RlcnMuU3Vydml2b3Ig0L3QtSDQvdCw0LnQtNC10L3QsCEiKQogICAgICAgIHJldHVybiBhbGxEYXRhCiAgICBlbmQKCiAgICBsb2NhbCBjaXZpbGlhbkZvbGRlciA9IHN1cnZpdm9yQ2hhcmFjdGVyc0ZvbGRlcjpGaW5kRmlyc3RDaGlsZCgiQ2l2aWxpYW4iKQogICAgaWYgY2l2aWxpYW5Gb2xkZXIgdGhlbgogICAgICAgIGxvY2FsIGFuaW1zRm9sZGVyID0gY2l2aWxpYW5Gb2xkZXI6RmluZEZpcnN0Q2hpbGQoIkFuaW1hdGlvbnMiKQogICAgICAgIGlmIGFuaW1zRm9sZGVyIHRoZW4KICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBsb2NhbCBtb3ZlbWVudEFuaW1zID0gZXh0cmFjdEFuaW1hdGlvbnNGcm9tRm9sZGVyKGFuaW1zRm9sZGVyKQogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGFiaWxpdGllc0ZvbGRlciA9IGFuaW1zRm9sZGVyOkZpbmRGaXJzdENoaWxkKCJBYmlsaXRpZXMiKQogICAgICAgICAgICBsb2NhbCBhYmlsaXR5QW5pbXMgPSBleHRyYWN0QW5pbWF0aW9uc0Zyb21Gb2xkZXIoYWJpbGl0aWVzRm9sZGVyKQoKICAgICAgICAgICAgCiAgICAgICAgICAgIGFsbERhdGFbIkNpdmlsaWFuIl0gPSB7CiAgICAgICAgICAgICAgICBNb3ZlbWVudCA9IG1vdmVtZW50QW5pbXMsCiAgICAgICAgICAgICAgICBBYmlsaXRpZXMgPSBhYmlsaXR5QW5pbXMKICAgICAgICAgICAgfQogICAgICAgIGVuZAogICAgZW5kCiAgICByZXR1cm4gYWxsRGF0YQplbmQKCgoKCgpsb2NhbCBmdW5jdGlvbiBjcmVhdGVDYXRlZ29yeUJ1dHRvbnMoY2F0ZWdvcnlOYW1lOiBzdHJpbmcpCiAgICBsb2NhbCBjdXJyZW50Q2F0ZWdvcnlEYXRhID0gY2F0ZWdvcnlEYXRhW2NhdGVnb3J5TmFtZV0KICAgIGlmIG5vdCBjdXJyZW50Q2F0ZWdvcnlEYXRhIHRoZW4gcmV0dXJuIGVuZAoKICAgIAogICAgZm9yIF8sIGJ1dHRvbiBpbiBwYWlycyhjdXJyZW50Q2F0ZWdvcnlEYXRhLmJ1dHRvbnMpIGRvIGJ1dHRvbjpEZXN0cm95KCkgZW5kCiAgICBjdXJyZW50Q2F0ZWdvcnlEYXRhLmJ1dHRvbnMgPSB7fQogICAgY3VycmVudENhdGVnb3J5RGF0YS5zdWJDYXRlZ29yaWVzID0ge30KCiAgICBpZiBjYXRlZ29yeU5hbWUgPT0gIktpbGxlciBBbmltYXRpb25zIiB0aGVuCiAgICAgICAgbG9jYWwgZGF0YVNvdXJjZSA9IGN1cnJlbnRDYXRlZ29yeURhdGEuZGF0YVNvdXJjZQogICAgICAgIGZvciBjaGFyYWN0ZXJOYW1lLCBjaGFyYWN0ZXJBbmltcyBpbiBwYWlycyhkYXRhU291cmNlKSBkbwogICAgICAgICAgICBjdXJyZW50Q2F0ZWdvcnlEYXRhLnN1YkNhdGVnb3JpZXNbY2hhcmFjdGVyTmFtZV0gPSB7IGRhdGEgPSBjaGFyYWN0ZXJBbmltcywgYnV0dG9ucyA9IHt9IH0KCiAgICAgICAgICAgIGxvY2FsIHN1YkNhdGVnb3J5QnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgY3VycmVudENhdGVnb3J5RGF0YS5zY3JvbGxpbmdGcmFtZSkKICAgICAgICAgICAgc3ViQ2F0ZWdvcnlCdXR0b24uTmFtZSA9IGNoYXJhY3Rlck5hbWUgLi4gIlN1YkNhdGVnb3J5QnV0dG9uIgogICAgICAgICAgICBzdWJDYXRlZ29yeUJ1dHRvbi5TaXplID0gVURpbTIubmV3KDEsIC0xMCwgMCwgNDApCiAgICAgICAgICAgIHN1YkNhdGVnb3J5QnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig4MCwgODAsIDgwKQogICAgICAgICAgICBzdWJDYXRlZ29yeUJ1dHRvbi5UZXh0ID0gY2hhcmFjdGVyTmFtZQogICAgICAgICAgICBzdWJDYXRlZ29yeUJ1dHRvbi5Gb250ID0gRW51bS5Gb250LlNvdXJjZVNhbnNCb2xkCiAgICAgICAgICAgIHN1YkNhdGVnb3J5QnV0dG9uLlRleHRTaXplID0gMTgKCQkJc3ViQ2F0ZWdvcnlCdXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5uZXcoMSwxLDEpCgogICAgICAgICAgICBjdXJyZW50Q2F0ZWdvcnlEYXRhLmJ1dHRvbnNbY2hhcmFjdGVyTmFtZV0gPSBzdWJDYXRlZ29yeUJ1dHRvbgoKICAgICAgICAgICAgc3ViQ2F0ZWdvcnlCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBjdXJyZW50Q2F0ZWdvcnlEYXRhLnNjcm9sbGluZ0ZyYW1lLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICAgICAgY3VycmVudFN1YkNhdGVnb3J5ID0gY2hhcmFjdGVyTmFtZQoJCQkJc3RhcnRNb3ZlbWVudEFuaW1hdGlvbk92ZXJyaWRlKGNoYXJhY3RlckFuaW1zKQoJCQkJCiAgICAgICAgICAgICAgICBsb2NhbCBzdWJDYXRGcmFtZSA9IGN1cnJlbnRDYXRlZ29yeURhdGEuc3ViQ2F0ZWdvcmllc1tjaGFyYWN0ZXJOYW1lXS5zY3JvbGxpbmdGcmFtZQogICAgICAgICAgICAgICAgaWYgbm90IHN1YkNhdEZyYW1lIHRoZW4KICAgICAgICAgICAgICAgICAgICBzdWJDYXRGcmFtZSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiLCBtYWluRnJhbWUpCiAgICAgICAgICAgICAgICAgICAgc3ViQ2F0RnJhbWUuTmFtZSA9IGNoYXJhY3Rlck5hbWUgLi4gIkFuaW1hdGlvbnNDb250YWluZXIiCiAgICAgICAgICAgICAgICAgICAgc3ViQ2F0RnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAtODApCiAgICAgICAgICAgICAgICAgICAgc3ViQ2F0RnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgODApCiAgICAgICAgICAgICAgICAgICAgc3ViQ2F0RnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDM1LCAzNSwgMzUpCgkJCQkJCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgc3ViQ2F0TGF5b3V0ID0gSW5zdGFuY2UubmV3KCJVSUxpc3RMYXlvdXQiLCBzdWJDYXRGcmFtZSkKICAgICAgICAgICAgICAgICAgICBzdWJDYXRMYXlvdXQuUGFkZGluZyA9IFVEaW0ubmV3KDAsIDUpCgogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDYXRlZ29yeURhdGEuc3ViQ2F0ZWdvcmllc1tjaGFyYWN0ZXJOYW1lXS5zY3JvbGxpbmdGcmFtZSA9IHN1YkNhdEZyYW1lCiAgICAgICAgICAgICAgICAgICAgY3VycmVudENhdGVnb3J5RGF0YS5zdWJDYXRlZ29yaWVzW2NoYXJhY3Rlck5hbWVdLnVpTGlzdExheW91dCA9IHN1YkNhdExheW91dAoKCQkJCQlsb2NhbCBhdXRvQW5pbXNCdG4gPSBjcmVhdGVLaWxsZXJBdXRvQW5pbXNCdXR0b24oc3ViQ2F0RnJhbWUsIGNoYXJhY3RlckFuaW1zKQoJCQkJCXRhYmxlLmluc2VydChjdXJyZW50Q2F0ZWdvcnlEYXRhLnN1YkNhdGVnb3JpZXNbY2hhcmFjdGVyTmFtZV0uYnV0dG9ucywgYXV0b0FuaW1zQnRuKQoJCQkJCQoJCQkJCWNyZWF0ZUFuaW1hdGlvbkJ1dHRvbnMoc3ViQ2F0RnJhbWUsIGNoYXJhY3RlckFuaW1zLCBjdXJyZW50Q2F0ZWdvcnlEYXRhLnN1YkNhdGVnb3JpZXNbY2hhcmFjdGVyTmFtZV0uYnV0dG9ucykKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIHN1YkNhdEZyYW1lLlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgICAgICBjdXJyZW50Q2F0ZWdvcnlEYXRhLmN1cnJlbnRTdWJDYXRlZ29yeUZyYW1lID0gc3ViQ2F0RnJhbWUKICAgICAgICAgICAgICAgIGN1cnJlbnRDYXRlZ29yeURhdGEuY3VycmVudFN1YkNhdGVnb3J5TGF5b3V0ID0gc3ViQ2F0RnJhbWU6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJVSUxpc3RMYXlvdXQiKQogICAgICAgICAgICAgICAgdXBkYXRlQ2FudmFzU2l6ZShzdWJDYXRGcmFtZSwgY3VycmVudENhdGVnb3J5RGF0YS5jdXJyZW50U3ViQ2F0ZWdvcnlMYXlvdXQpCiAgICAgICAgICAgICAgICAKCQkJCXB1c2hCYWNrRnVuY3Rpb24oZnVuY3Rpb24oKQoJCQkJCXN0b3BNb3ZlbWVudEFuaW1hdGlvbk92ZXJyaWRlKCkKCQkJCQlzdWJDYXRGcmFtZS5WaXNpYmxlID0gZmFsc2UKCQkJCQljdXJyZW50Q2F0ZWdvcnlEYXRhLnNjcm9sbGluZ0ZyYW1lLlZpc2libGUgPSB0cnVlCgkJCQkJY3VycmVudFN1YkNhdGVnb3J5ID0gbmlsCgkJCQkJY3VycmVudENhdGVnb3J5RGF0YS5jdXJyZW50U3ViQ2F0ZWdvcnlGcmFtZSA9IG5pbAoJCQkJZW5kKQogICAgICAgICAgICBlbmQpCiAgICAgICAgZW5kCiAgICAgICAgdXBkYXRlQ2FudmFzU2l6ZShjdXJyZW50Q2F0ZWdvcnlEYXRhLnNjcm9sbGluZ0ZyYW1lLCBjdXJyZW50Q2F0ZWdvcnlEYXRhLnVpTGlzdExheW91dCkKCiAgICBlbHNlaWYgY2F0ZWdvcnlOYW1lID09ICJLaWxsZXItU2tpbnMgQW5pbSIgdGhlbgogICAgICAgIGxvY2FsIGRhdGFTb3VyY2UgPSBjdXJyZW50Q2F0ZWdvcnlEYXRhLmRhdGFTb3VyY2UKICAgICAgICBmb3Iga2lsbGVyTmFtZSwga2lsbGVyU2tpbnNEYXRhIGluIHBhaXJzKGRhdGFTb3VyY2UpIGRvCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBuZXh0KGtpbGxlclNraW5zRGF0YSkgPT0gbmlsIHRoZW4gY29udGludWUgZW5kCgogICAgICAgICAgICBjdXJyZW50Q2F0ZWdvcnlEYXRhLnN1YkNhdGVnb3JpZXNba2lsbGVyTmFtZV0gPSB7IGJ1dHRvbnMgPSB7fSB9CgogICAgICAgICAgICBsb2NhbCBraWxsZXJCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBjdXJyZW50Q2F0ZWdvcnlEYXRhLnNjcm9sbGluZ0ZyYW1lKQogICAgICAgICAgICBraWxsZXJCdXR0b24uTmFtZSA9IGtpbGxlck5hbWUgLi4gIktpbGxlckJ1dHRvbiIKICAgICAgICAgICAga2lsbGVyQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMSwgLTEwLCAwLCA0MCkKICAgICAgICAgICAga2lsbGVyQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig4MCwgODAsIDgwKQogICAgICAgICAgICBraWxsZXJCdXR0b24uVGV4dCA9IGtpbGxlck5hbWUKICAgICAgICAgICAga2lsbGVyQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKCQkJa2lsbGVyQnV0dG9uLlRleHRTaXplID0gMTgKCQkJa2lsbGVyQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMubmV3KDEsMSwxKQogICAgICAgICAgICBjdXJyZW50Q2F0ZWdvcnlEYXRhLmJ1dHRvbnNba2lsbGVyTmFtZV0gPSBraWxsZXJCdXR0b24KCiAgICAgICAgICAgIGtpbGxlckJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIGN1cnJlbnRDYXRlZ29yeURhdGEuc2Nyb2xsaW5nRnJhbWUuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgICAgICBjdXJyZW50U3ViQ2F0ZWdvcnkgPSBraWxsZXJOYW1lCgogICAgICAgICAgICAgICAgbG9jYWwga2lsbGVyRnJhbWUgPSBjdXJyZW50Q2F0ZWdvcnlEYXRhLnN1YkNhdGVnb3JpZXNba2lsbGVyTmFtZV0uc2Nyb2xsaW5nRnJhbWUKICAgICAgICAgICAgICAgIGlmIG5vdCBraWxsZXJGcmFtZSB0aGVuCiAgICAgICAgICAgICAgICAgICAga2lsbGVyRnJhbWUgPSBJbnN0YW5jZS5uZXcoIlNjcm9sbGluZ0ZyYW1lIiwgbWFpbkZyYW1lKQogICAgICAgICAgICAgICAgICAgIGtpbGxlckZyYW1lLk5hbWUgPSBraWxsZXJOYW1lIC4uICJTa2luc0NvbnRhaW5lciIKICAgICAgICAgICAgICAgICAgICBraWxsZXJGcmFtZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDEsIC04MCkKICAgICAgICAgICAgICAgICAgICBraWxsZXJGcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCA4MCkKCQkJCQlraWxsZXJGcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMzUsIDM1LCAzNSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBsb2NhbCBraWxsZXJMYXlvdXQgPSBJbnN0YW5jZS5uZXcoIlVJTGlzdExheW91dCIsIGtpbGxlckZyYW1lKQogICAgICAgICAgICAgICAgICAgIGtpbGxlckxheW91dC5QYWRkaW5nID0gVURpbS5uZXcoMCwgNSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2F0ZWdvcnlEYXRhLnN1YkNhdGVnb3JpZXNba2lsbGVyTmFtZV0uc2Nyb2xsaW5nRnJhbWUgPSBraWxsZXJGcmFtZQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDYXRlZ29yeURhdGEuc2tpblN1YkNhdGVnb3JpZXNba2lsbGVyTmFtZV0gPSB7fQoKICAgICAgICAgICAgICAgICAgICBmb3Igc2tpbk5hbWUsIHNraW5EYXRhIGluIHBhaXJzKGtpbGxlclNraW5zRGF0YSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENhdGVnb3J5RGF0YS5za2luU3ViQ2F0ZWdvcmllc1traWxsZXJOYW1lXVtza2luTmFtZV0gPSB7IGRhdGEgPSBza2luRGF0YSwgYnV0dG9ucyA9IHt9IH0KICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHNraW5CdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBraWxsZXJGcmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgc2tpbkJ1dHRvbi5OYW1lID0gc2tpbk5hbWUgLi4gIlNraW5CdXR0b24iCiAgICAgICAgICAgICAgICAgICAgICAgIHNraW5CdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygxLCAtMTAsIDAsIDQwKQogICAgICAgICAgICAgICAgICAgICAgICBza2luQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig3MCwgNzAsIDcwKQogICAgICAgICAgICAgICAgICAgICAgICBza2luQnV0dG9uLlRleHQgPSBza2luTmFtZQogICAgICAgICAgICAgICAgICAgICAgICBza2luQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKCQkJCQkJc2tpbkJ1dHRvbi5UZXh0U2l6ZSA9IDE4CgkJCQkJCXNraW5CdXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5uZXcoMSwxLDEpCiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChjdXJyZW50Q2F0ZWdvcnlEYXRhLnN1YkNhdGVnb3JpZXNba2lsbGVyTmFtZV0uYnV0dG9ucywgc2tpbkJ1dHRvbikKCiAgICAgICAgICAgICAgICAgICAgICAgIHNraW5CdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBraWxsZXJGcmFtZS5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTa2luTmFtZSA9IHNraW5OYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE1vdmVtZW50QW5pbWF0aW9uT3ZlcnJpZGUoc2tpbkRhdGEpCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgc2tpbkFuaW1GcmFtZSA9IGN1cnJlbnRDYXRlZ29yeURhdGEuc2tpblN1YkNhdGVnb3JpZXNba2lsbGVyTmFtZV1bc2tpbk5hbWVdLnNjcm9sbGluZ0ZyYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc2tpbkFuaW1GcmFtZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpbkFuaW1GcmFtZSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiLCBtYWluRnJhbWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpbkFuaW1GcmFtZS5OYW1lID0gc2tpbk5hbWUgLi4gIkFuaW1zQ29udGFpbmVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraW5BbmltRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAtODApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpbkFuaW1GcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCA4MCkKCQkJCQkJCQlza2luQW5pbUZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigzNSwgMzUsIDM1KQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBza2luQW5pbUxheW91dCA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0Iiwgc2tpbkFuaW1GcmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2luQW5pbUxheW91dC5QYWRkaW5nID0gVURpbS5uZXcoMCwgNSkKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENhdGVnb3J5RGF0YS5za2luU3ViQ2F0ZWdvcmllc1traWxsZXJOYW1lXVtza2luTmFtZV0uc2Nyb2xsaW5nRnJhbWUgPSBza2luQW5pbUZyYW1lCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGF1dG9Bbmltc0J0biA9IGNyZWF0ZUtpbGxlckF1dG9Bbmltc0J1dHRvbihza2luQW5pbUZyYW1lLCBza2luRGF0YSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoY3VycmVudENhdGVnb3J5RGF0YS5za2luU3ViQ2F0ZWdvcmllc1traWxsZXJOYW1lXVtza2luTmFtZV0uYnV0dG9ucywgYXV0b0FuaW1zQnRuKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUFuaW1hdGlvbkJ1dHRvbnMoc2tpbkFuaW1GcmFtZSwgc2tpbkRhdGEsIGN1cnJlbnRDYXRlZ29yeURhdGEuc2tpblN1YkNhdGVnb3JpZXNba2lsbGVyTmFtZV1bc2tpbk5hbWVdLmJ1dHRvbnMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpbkFuaW1GcmFtZS5WaXNpYmxlID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENhdGVnb3J5RGF0YS5jdXJyZW50U2tpbkZyYW1lID0gc2tpbkFuaW1GcmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2FudmFzU2l6ZShza2luQW5pbUZyYW1lLCBza2luQW5pbUZyYW1lOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiVUlMaXN0TGF5b3V0IikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJCXB1c2hCYWNrRnVuY3Rpb24oZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BNb3ZlbWVudEFuaW1hdGlvbk92ZXJyaWRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2luQW5pbUZyYW1lLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbGxlckZyYW1lLlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFNraW5OYW1lID0gbmlsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENhdGVnb3J5RGF0YS5jdXJyZW50U2tpbkZyYW1lID0gbmlsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIGtpbGxlckZyYW1lLlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgICAgICBjdXJyZW50Q2F0ZWdvcnlEYXRhLmN1cnJlbnRTdWJDYXRlZ29yeUZyYW1lID0ga2lsbGVyRnJhbWUKICAgICAgICAgICAgICAgIHVwZGF0ZUNhbnZhc1NpemUoa2lsbGVyRnJhbWUsIGtpbGxlckZyYW1lOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiVUlMaXN0TGF5b3V0IikpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHB1c2hCYWNrRnVuY3Rpb24oZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIGtpbGxlckZyYW1lLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDYXRlZ29yeURhdGEuc2Nyb2xsaW5nRnJhbWUuVmlzaWJsZSA9IHRydWUKICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3ViQ2F0ZWdvcnkgPSBuaWwKICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q2F0ZWdvcnlEYXRhLmN1cnJlbnRTdWJDYXRlZ29yeUZyYW1lID0gbmlsCiAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgIGVuZCkKICAgICAgICBlbmQKICAgICAgICB1cGRhdGVDYW52YXNTaXplKGN1cnJlbnRDYXRlZ29yeURhdGEuc2Nyb2xsaW5nRnJhbWUsIGN1cnJlbnRDYXRlZ29yeURhdGEudWlMaXN0TGF5b3V0KQoJCQoJCgllbHNlaWYgY2F0ZWdvcnlOYW1lID09ICJTdXJ2aXZvcnMgQW5pbWF0aW9ucyIgdGhlbgoJCWxvY2FsIGRhdGFTb3VyY2UgPSBjdXJyZW50Q2F0ZWdvcnlEYXRhLmRhdGFTb3VyY2UKCQlmb3IgY2hhcmFjdGVyTmFtZSwgY2hhcmFjdGVyRGF0YSBpbiBwYWlycyhkYXRhU291cmNlKSBkbwoJCQkKCQkJY3VycmVudENhdGVnb3J5RGF0YS5zdWJDYXRlZ29yaWVzW2NoYXJhY3Rlck5hbWVdID0geyBkYXRhID0gY2hhcmFjdGVyRGF0YSwgYnV0dG9ucyA9IHt9IH0KCgkJCWxvY2FsIHN1YkNhdGVnb3J5QnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgY3VycmVudENhdGVnb3J5RGF0YS5zY3JvbGxpbmdGcmFtZSkKCQkJc3ViQ2F0ZWdvcnlCdXR0b24uTmFtZSA9IGNoYXJhY3Rlck5hbWUgLi4gIlN1YkNhdGVnb3J5QnV0dG9uIgoJCQlzdWJDYXRlZ29yeUJ1dHRvbi5TaXplID0gVURpbTIubmV3KDEsIC0xMCwgMCwgNDApCgkJCXN1YkNhdGVnb3J5QnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig4MCwgODAsIDgwKQoJCQlzdWJDYXRlZ29yeUJ1dHRvbi5UZXh0ID0gY2hhcmFjdGVyTmFtZQoJCQlzdWJDYXRlZ29yeUJ1dHRvbi5Gb250ID0gRW51bS5Gb250LlNvdXJjZVNhbnNCb2xkCgkJCXN1YkNhdGVnb3J5QnV0dG9uLlRleHRTaXplID0gMTgKCQkJc3ViQ2F0ZWdvcnlCdXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5uZXcoMSwxLDEpCgoJCQljdXJyZW50Q2F0ZWdvcnlEYXRhLmJ1dHRvbnNbY2hhcmFjdGVyTmFtZV0gPSBzdWJDYXRlZ29yeUJ1dHRvbgoKCQkJc3ViQ2F0ZWdvcnlCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCgkJCQljdXJyZW50Q2F0ZWdvcnlEYXRhLnNjcm9sbGluZ0ZyYW1lLlZpc2libGUgPSBmYWxzZQoJCQkJY3VycmVudFN1YkNhdGVnb3J5ID0gY2hhcmFjdGVyTmFtZQoJCQkJCgkJCQlzdGFydE1vdmVtZW50QW5pbWF0aW9uT3ZlcnJpZGUoY2hhcmFjdGVyRGF0YS5Nb3ZlbWVudCkKCgkJCQlsb2NhbCBzdWJDYXRGcmFtZSA9IGN1cnJlbnRDYXRlZ29yeURhdGEuc3ViQ2F0ZWdvcmllc1tjaGFyYWN0ZXJOYW1lXS5zY3JvbGxpbmdGcmFtZQoJCQkJaWYgbm90IHN1YkNhdEZyYW1lIHRoZW4KCQkJCQlzdWJDYXRGcmFtZSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiLCBtYWluRnJhbWUpCgkJCQkJc3ViQ2F0RnJhbWUuTmFtZSA9IGNoYXJhY3Rlck5hbWUgLi4gIkFuaW1hdGlvbnNDb250YWluZXIiCgkJCQkJc3ViQ2F0RnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAtODApCgkJCQkJc3ViQ2F0RnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgODApCgkJCQkJc3ViQ2F0RnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDM1LCAzNSwgMzUpCgoJCQkJCWxvY2FsIHN1YkNhdExheW91dCA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0Iiwgc3ViQ2F0RnJhbWUpCgkJCQkJc3ViQ2F0TGF5b3V0LlBhZGRpbmcgPSBVRGltLm5ldygwLCA1KQoKCQkJCQljdXJyZW50Q2F0ZWdvcnlEYXRhLnN1YkNhdGVnb3JpZXNbY2hhcmFjdGVyTmFtZV0uc2Nyb2xsaW5nRnJhbWUgPSBzdWJDYXRGcmFtZQoJCQkJCWN1cnJlbnRDYXRlZ29yeURhdGEuc3ViQ2F0ZWdvcmllc1tjaGFyYWN0ZXJOYW1lXS51aUxpc3RMYXlvdXQgPSBzdWJDYXRMYXlvdXQKCQkJCQkKCQkJCQkKCQkJCQlsb2NhbCBhdXRvQW5pbUJ1dHRvbnMgPSBjcmVhdGVTdXJ2aXZvckF1dG9Bbmltc0J1dHRvbnMoc3ViQ2F0RnJhbWUsIGNoYXJhY3RlckRhdGEuTW92ZW1lbnQpCgkJCQkJZm9yIF8sIGJ0biBpbiBpcGFpcnMoYXV0b0FuaW1CdXR0b25zKSBkbwoJCQkJCQl0YWJsZS5pbnNlcnQoY3VycmVudENhdGVnb3J5RGF0YS5zdWJDYXRlZ29yaWVzW2NoYXJhY3Rlck5hbWVdLmJ1dHRvbnMsIGJ0bikKCQkJCQllbmQKCQkJCQkKCQkJCQkKCQkJCQlpZiBuZXh0KGNoYXJhY3RlckRhdGEuQWJpbGl0aWVzKSB0aGVuCgkJCQkJCWxvY2FsIGFiaWxpdGllc0J1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCgkJCQkJCWFiaWxpdGllc0J1dHRvbi5OYW1lID0gIkFiaWxpdGllc0J1dHRvbiIKCQkJCQkJYWJpbGl0aWVzQnV0dG9uLlBhcmVudCA9IHN1YkNhdEZyYW1lCgkJCQkJCWFiaWxpdGllc0J1dHRvbi5TaXplID0gVURpbTIubmV3KDEsIC0xMCwgMCwgNDApCgkJCQkJCWFiaWxpdGllc0J1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoOTAsIDYwLCAxMzApIAoJCQkJCQlhYmlsaXRpZXNCdXR0b24uQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKCQkJCQkJYWJpbGl0aWVzQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQoJCQkJCQlhYmlsaXRpZXNCdXR0b24uVGV4dCA9ICJBYmlsaXRpZXMiCgkJCQkJCWFiaWxpdGllc0J1dHRvbi5Gb250ID0gRW51bS5Gb250LlNvdXJjZVNhbnNCb2xkCgkJCQkJCWFiaWxpdGllc0J1dHRvbi5UZXh0U2l6ZSA9IDE4CgkJCQkJCWFiaWxpdGllc0J1dHRvbi5MYXlvdXRPcmRlciA9IC01MAoJCQkJCQl0YWJsZS5pbnNlcnQoY3VycmVudENhdGVnb3J5RGF0YS5zdWJDYXRlZ29yaWVzW2NoYXJhY3Rlck5hbWVdLmJ1dHRvbnMsIGFiaWxpdGllc0J1dHRvbikKCQkJCQkJCgkJCQkJCWFiaWxpdGllc0J1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKCQkJCQkJCXN1YkNhdEZyYW1lLlZpc2libGUgPSBmYWxzZQoJCQkJCQkJCgkJCQkJCQlsb2NhbCBhYmlsaXRpZXNGcmFtZSA9IGN1cnJlbnRDYXRlZ29yeURhdGEuc3ViQ2F0ZWdvcmllc1tjaGFyYWN0ZXJOYW1lXS5hYmlsaXRpZXNGcmFtZQoJCQkJCQkJaWYgbm90IGFiaWxpdGllc0ZyYW1lIHRoZW4KCQkJCQkJCQlhYmlsaXRpZXNGcmFtZSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiLCBtYWluRnJhbWUpCgkJCQkJCQkJYWJpbGl0aWVzRnJhbWUuTmFtZSA9ICJBYmlsaXRpZXNDb250YWluZXIiCgkJCQkJCQkJYWJpbGl0aWVzRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAtODApCgkJCQkJCQkJYWJpbGl0aWVzRnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgODApCgkJCQkJCQkJYWJpbGl0aWVzRnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDM1LCAzNSwgMzUpCgkJCQkJCQkJCgkJCQkJCQkJbG9jYWwgYWJpbGl0aWVzTGF5b3V0ID0gSW5zdGFuY2UubmV3KCJVSUxpc3RMYXlvdXQiLCBhYmlsaXRpZXNGcmFtZSkKCQkJCQkJCQlhYmlsaXRpZXNMYXlvdXQuUGFkZGluZyA9IFVEaW0ubmV3KDAsIDUpCgkJCQkJCQkJCgkJCQkJCQkJY3VycmVudENhdGVnb3J5RGF0YS5zdWJDYXRlZ29yaWVzW2NoYXJhY3Rlck5hbWVdLmFiaWxpdGllc0ZyYW1lID0gYWJpbGl0aWVzRnJhbWUKCQkJCQkJCQkKCQkJCQkJCQkKCQkJCQkJCQljcmVhdGVBbmltYXRpb25CdXR0b25zKGFiaWxpdGllc0ZyYW1lLCBjaGFyYWN0ZXJEYXRhLkFiaWxpdGllcywge30pIAoJCQkJCQkJZW5kCgkJCQkJCQkKCQkJCQkJCWFiaWxpdGllc0ZyYW1lLlZpc2libGUgPSB0cnVlCgkJCQkJCQl1cGRhdGVDYW52YXNTaXplKGFiaWxpdGllc0ZyYW1lLCBhYmlsaXRpZXNGcmFtZTpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIlVJTGlzdExheW91dCIpKQoJCQkJCQkJCgkJCQkJCQlwdXNoQmFja0Z1bmN0aW9uKGZ1bmN0aW9uKCkKCQkJCQkJCQlhYmlsaXRpZXNGcmFtZS5WaXNpYmxlID0gZmFsc2UKCQkJCQkJCQlzdWJDYXRGcmFtZS5WaXNpYmxlID0gdHJ1ZQoJCQkJCQkJZW5kKQoJCQkJCQllbmQpCgkJCQkJZW5kCgkJCQkJCgkJCQkJCgkJCQkJY3JlYXRlQW5pbWF0aW9uQnV0dG9ucyhzdWJDYXRGcmFtZSwgY2hhcmFjdGVyRGF0YS5Nb3ZlbWVudCwgY3VycmVudENhdGVnb3J5RGF0YS5zdWJDYXRlZ29yaWVzW2NoYXJhY3Rlck5hbWVdLmJ1dHRvbnMpCgkJCQllbmQKCgkJCQlzdWJDYXRGcmFtZS5WaXNpYmxlID0gdHJ1ZQoJCQkJY3VycmVudENhdGVnb3J5RGF0YS5jdXJyZW50U3ViQ2F0ZWdvcnlGcmFtZSA9IHN1YkNhdEZyYW1lCgkJCQljdXJyZW50Q2F0ZWdvcnlEYXRhLmN1cnJlbnRTdWJDYXRlZ29yeUxheW91dCA9IHN1YkNhdEZyYW1lOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiVUlMaXN0TGF5b3V0IikKCQkJCXVwZGF0ZUNhbnZhc1NpemUoc3ViQ2F0RnJhbWUsIGN1cnJlbnRDYXRlZ29yeURhdGEuY3VycmVudFN1YkNhdGVnb3J5TGF5b3V0KQoKCQkJCXB1c2hCYWNrRnVuY3Rpb24oZnVuY3Rpb24oKQoJCQkJCXN0b3BNb3ZlbWVudEFuaW1hdGlvbk92ZXJyaWRlKCkKCQkJCQlzdWJDYXRGcmFtZS5WaXNpYmxlID0gZmFsc2UKCQkJCQljdXJyZW50Q2F0ZWdvcnlEYXRhLnNjcm9sbGluZ0ZyYW1lLlZpc2libGUgPSB0cnVlCgkJCQkJY3VycmVudFN1YkNhdGVnb3J5ID0gbmlsCgkJCQkJY3VycmVudENhdGVnb3J5RGF0YS5jdXJyZW50U3ViQ2F0ZWdvcnlGcmFtZSA9IG5pbAoJCQkJCWlzU3Vydml2b3JBdXRvQW5pbXNFbmFibGVkID0gZmFsc2UgCgkJCQkJaXNTdXJ2aXZvckh1cnRBbmltc0VuYWJsZWQgPSBmYWxzZQoJCQkJZW5kKQoJCQllbmQpCgkJZW5kCgkJdXBkYXRlQ2FudmFzU2l6ZShjdXJyZW50Q2F0ZWdvcnlEYXRhLnNjcm9sbGluZ0ZyYW1lLCBjdXJyZW50Q2F0ZWdvcnlEYXRhLnVpTGlzdExheW91dCkKCWVuZAplbmQKCgpiYWNrQnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKYmFja0J1dHRvbi5OYW1lID0gIkJhY2tCdXR0b24iCmJhY2tCdXR0b24uUGFyZW50ID0gbWFpbkZyYW1lCmJhY2tCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLCA2MCwgMCwgMzApCmJhY2tCdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgNSwgMCwgNDUpCmJhY2tCdXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDcwLCA3MCwgNzApCmJhY2tCdXR0b24uQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKYmFja0J1dHRvbi5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKYmFja0J1dHRvbi5UZXh0ID0gIuKGkCBCYWNrIgpiYWNrQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKYmFja0J1dHRvbi5UZXh0U2l6ZSA9IDE0CmJhY2tCdXR0b24uWkluZGV4ID0gMgpiYWNrQnV0dG9uLlZpc2libGUgPSBmYWxzZQpiYWNrQnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZXhlY3V0ZUJhY2tGdW5jdGlvbikKCgpsb2NhbCBmdW5jdGlvbiBzd2l0Y2hUb0NhdGVnb3J5KG5ld0NhdGVnb3J5TmFtZTogc3RyaW5nKQogICAgaWYgY3VycmVudENhdGVnb3J5ID09IG5ld0NhdGVnb3J5TmFtZSBhbmQgbm90IGN1cnJlbnRTdWJDYXRlZ29yeSBhbmQgbm90IGN1cnJlbnRTa2luTmFtZSB0aGVuIHJldHVybiBlbmQKCQoJc3RvcE1vdmVtZW50QW5pbWF0aW9uT3ZlcnJpZGUoKQoJY2xlYXJCYWNrU3RhY2soKQoKICAgIGxvY2FsIHByZXZDYXRlZ29yeURhdGEgPSBjYXRlZ29yeURhdGFbY3VycmVudENhdGVnb3J5XQogICAgaWYgcHJldkNhdGVnb3J5RGF0YSB0aGVuCiAgICAgICAgaWYgcHJldkNhdGVnb3J5RGF0YS5zY3JvbGxpbmdGcmFtZSB0aGVuIHByZXZDYXRlZ29yeURhdGEuc2Nyb2xsaW5nRnJhbWUuVmlzaWJsZSA9IGZhbHNlIGVuZAogICAgICAgIGlmIHByZXZDYXRlZ29yeURhdGEuY3VycmVudFN1YkNhdGVnb3J5RnJhbWUgdGhlbiBwcmV2Q2F0ZWdvcnlEYXRhLmN1cnJlbnRTdWJDYXRlZ29yeUZyYW1lLlZpc2libGUgPSBmYWxzZSBlbmQKCQlpZiBwcmV2Q2F0ZWdvcnlEYXRhLmN1cnJlbnRTa2luRnJhbWUgdGhlbiBwcmV2Q2F0ZWdvcnlEYXRhLmN1cnJlbnRTa2luRnJhbWUuVmlzaWJsZSA9IGZhbHNlIGVuZAoJCQoJCWlmIHByZXZDYXRlZ29yeURhdGEuc3ViQ2F0ZWdvcmllcyB0aGVuCgkJCWZvciBfLCBzdWJDYXQgaW4gcGFpcnMocHJldkNhdGVnb3J5RGF0YS5zdWJDYXRlZ29yaWVzKSBkbwoJCQkJaWYgc3ViQ2F0LmFiaWxpdGllc0ZyYW1lIHRoZW4gc3ViQ2F0LmFiaWxpdGllc0ZyYW1lLlZpc2libGUgPSBmYWxzZSBlbmQKCQkJZW5kCgkJZW5kCiAgICBlbmQKIAogICAgY3VycmVudFN1YkNhdGVnb3J5ID0gbmlsCgljdXJyZW50U2tpbk5hbWUgPSBuaWwKCiAgICBsb2NhbCBuZXdDYXRlZ29yeURhdGEgPSBjYXRlZ29yeURhdGFbbmV3Q2F0ZWdvcnlOYW1lXQogICAgaWYgbmV3Q2F0ZWdvcnlEYXRhIGFuZCBuZXdDYXRlZ29yeURhdGEuc2Nyb2xsaW5nRnJhbWUgdGhlbgogICAgICAgIG5ld0NhdGVnb3J5RGF0YS5zY3JvbGxpbmdGcmFtZS5WaXNpYmxlID0gdHJ1ZQogICAgICAgIGN1cnJlbnRDYXRlZ29yeSA9IG5ld0NhdGVnb3J5TmFtZQogICAgZW5kCmVuZAoKCgpmb3IgY2F0TmFtZSwgY2F0RGF0YSBpbiBwYWlycyhjYXRlZ29yeURhdGEpIGRvCiAgICBsb2NhbCBzY3JvbGxpbmdGcmFtZSA9IEluc3RhbmNlLm5ldygiU2Nyb2xsaW5nRnJhbWUiKQogICAgc2Nyb2xsaW5nRnJhbWUuTmFtZSA9IGNhdE5hbWUgLi4gIkNvbnRhaW5lciIKICAgIHNjcm9sbGluZ0ZyYW1lLlBhcmVudCA9IG1haW5GcmFtZQogICAgc2Nyb2xsaW5nRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAtODApCiAgICBzY3JvbGxpbmdGcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCA4MCkKICAgIHNjcm9sbGluZ0ZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigzNSwgMzUsIDM1KQogICAgc2Nyb2xsaW5nRnJhbWUuQm9yZGVyU2l6ZVBpeGVsID0gMAogICAgc2Nyb2xsaW5nRnJhbWUuU2Nyb2xsQmFySW1hZ2VDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgc2Nyb2xsaW5nRnJhbWUuVmlzaWJsZSA9IGZhbHNlCgogICAgbG9jYWwgdWlMaXN0TGF5b3V0ID0gSW5zdGFuY2UubmV3KCJVSUxpc3RMYXlvdXQiKQogICAgdWlMaXN0TGF5b3V0LlBhcmVudCA9IHNjcm9sbGluZ0ZyYW1lCiAgICB1aUxpc3RMYXlvdXQuUGFkZGluZyA9IFVEaW0ubmV3KDAsIDUpCgogICAgY2F0RGF0YS5zY3JvbGxpbmdGcmFtZSA9IHNjcm9sbGluZ0ZyYW1lCiAgICBjYXREYXRhLnVpTGlzdExheW91dCA9IHVpTGlzdExheW91dAplbmQKCmxvY2FsIGNhdGVnb3J5QnV0dG9uTmFtZXMgPSB7IktpbGxlciBBbmltYXRpb25zIiwgIktpbGxlci1Ta2lucyBBbmltIiwgIlN1cnZpdm9ycyBBbmltYXRpb25zIn0KZm9yIGksIGNhdE5hbWUgaW4gaXBhaXJzKGNhdGVnb3J5QnV0dG9uTmFtZXMpIGRvCiAgICBsb2NhbCBidXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQogICAgYnV0dG9uLk5hbWUgPSBjYXROYW1lIC4uICJUYWIiCiAgICBidXR0b24uUGFyZW50ID0gY2F0ZWdvcnlCdXR0b25zRnJhbWUKICAgIGJ1dHRvbi5TaXplID0gVURpbTIubmV3KDEvI2NhdGVnb3J5QnV0dG9uTmFtZXMsIC01LCAxLCAtMTApCiAgICBidXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDUwLCA1MCwgNTApCiAgICBidXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCiAgICBidXR0b24uVGV4dCA9IGNhdE5hbWUKICAgIGJ1dHRvbi5Gb250ID0gRW51bS5Gb250LlNvdXJjZVNhbnNCb2xkCiAgICBidXR0b24uVGV4dFNpemUgPSAxNgogICAgYnV0dG9uLkxheW91dE9yZGVyID0gaQoKICAgIGJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICBzd2l0Y2hUb0NhdGVnb3J5KGNhdE5hbWUpCiAgICBlbmQpCmVuZAoKbG9jYWwgZnVuY3Rpb24gdG9nZ2xlU2VhcmNoQmFyKCkKICAgIHNlYXJjaFRleHRCb3guVmlzaWJsZSA9IG5vdCBzZWFyY2hUZXh0Qm94LlZpc2libGUKICAgIAplbmQKCmxvY2FsIGZ1bmN0aW9uIHRvZ2dsZU1lbnUoKQogICAgbWFpbkZyYW1lLlZpc2libGUgPSBub3QgbWFpbkZyYW1lLlZpc2libGUKICAgIG9wZW5CdXR0b24uVGV4dCA9IG1haW5GcmFtZS5WaXNpYmxlIGFuZCAiQ2xvc2UgTWVudSIgb3IgIk9wZW4gTWVudSIKICAgIGlmIG1haW5GcmFtZS5WaXNpYmxlIHRoZW4KICAgICAgICBzd2l0Y2hUb0NhdGVnb3J5KCJLaWxsZXIgQW5pbWF0aW9ucyIpIAogICAgZWxzZQoJCXN0b3BNb3ZlbWVudEFuaW1hdGlvbk92ZXJyaWRlKCkKCQljbGVhckJhY2tTdGFjaygpCiAgICBlbmQKZW5kCgpvcGVuQnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QodG9nZ2xlTWVudSkKc2VhcmNoQnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QodG9nZ2xlU2VhcmNoQmFyKQpzZWFyY2hUZXh0Qm94LkNoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihwcm9wZXJ0eSkgaWYgcHJvcGVydHkgPT0gIlRleHQiIHRoZW4gZmlsdGVyQnV0dG9ucyhzZWFyY2hUZXh0Qm94LlRleHQpIGVuZCBlbmQpCgoKbG9jYWwgZnVuY3Rpb24gaGFuZGxlQ2hhcmFjdGVyU2V0dXAobmV3Q2hhcmFjdGVyOiBNb2RlbCkKCWxvY2FsIHN1Y2Nlc3MsIG5ld0h1bWFub2lkID0gcGNhbGwoZnVuY3Rpb24oKQoJCXJldHVybiBuZXdDaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZCIsIDEwKQoJZW5kKQoJaWYgc3VjY2VzcyBhbmQgbmV3SHVtYW5vaWQgdGhlbgoJCWh1bWFub2lkID0gbmV3SHVtYW5vaWQKCQlvcmlnaW5hbEp1bXBQb3dlciA9IGh1bWFub2lkLkp1bXBQb3dlciBvciA1MAoJCXN0b3BBbGxFbW90ZXMoKQoKCQlodW1hbm9pZC5TdGF0ZUNoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbihvbGRTdGF0ZSwgbmV3U3RhdGUpCgkJCWlmIG5ld1N0YXRlID09IEVudW0uSHVtYW5vaWRTdGF0ZVR5cGUuSnVtcGluZyB0aGVuCgkJCQlpZiBhY3RpdmVFbW90ZXNbaHVtYW5vaWRdIHRoZW4KCQkJCQlzdG9wRW1vdGVGb3JIdW1hbm9pZChodW1hbm9pZCkKCQkJCWVuZAoJCQllbmQKCQllbmQpCgllbHNlCgkJaHVtYW5vaWQgPSBuaWwKCWVuZAplbmQKCnBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGNoYXIpCgljaGFyYWN0ZXIgPSBjaGFyCgloYW5kbGVDaGFyYWN0ZXJTZXR1cChjaGFyKQplbmQpCgppZiBwbGF5ZXIuQ2hhcmFjdGVyIHRoZW4KCWhhbmRsZUNoYXJhY3RlclNldHVwKHBsYXllci5DaGFyYWN0ZXIpCmVuZAoKClVzZXJJbnB1dFNlcnZpY2UuSW5wdXRCZWdhbjpDb25uZWN0KGZ1bmN0aW9uKGlucHV0LCBnYW1lUHJvY2Vzc2VkRXZlbnQpCglpZiBnYW1lUHJvY2Vzc2VkRXZlbnQgdGhlbiByZXR1cm4gZW5kCglpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5TcGFjZSB0aGVuCgkJc3RvcEFsbEVtb3RlcygpCgllbmQKZW5kKQoKCnByaW50KCJERUJVRzog0JfQsNCz0YDRg9C30LrQsCDQuCDRgdC60LDQvdC40YDQvtCy0LDQvdC40LUg0LTQsNC90L3Ri9GFINCw0L3QuNC80LDRhtC40LkuLi4iKQoKCmxvY2FsIGRpc2NvdmVyZWREYXRhID0gZGlzY292ZXJBbGxLaWxsZXJEYXRhKCkKY2F0ZWdvcnlEYXRhWyJLaWxsZXIgQW5pbWF0aW9ucyJdLmRhdGFTb3VyY2UgPSBkaXNjb3ZlcmVkRGF0YS5LaWxsZXJzCmNhdGVnb3J5RGF0YVsiS2lsbGVyLVNraW5zIEFuaW0iXS5kYXRhU291cmNlID0gZGlzY292ZXJlZERhdGEuU2tpbnMKY2F0ZWdvcnlEYXRhWyJTdXJ2aXZvcnMgQW5pbWF0aW9ucyJdLmRhdGFTb3VyY2UgPSBkaXNjb3ZlckFsbFN1cnZpdm9yRGF0YSgpCgoKY3JlYXRlQ2F0ZWdvcnlCdXR0b25zKCJLaWxsZXIgQW5pbWF0aW9ucyIpCmNyZWF0ZUNhdGVnb3J5QnV0dG9ucygiS2lsbGVyLVNraW5zIEFuaW0iKQpjcmVhdGVDYXRlZ29yeUJ1dHRvbnMoIlN1cnZpdm9ycyBBbmltYXRpb25zIikKCgpzd2l0Y2hUb0NhdGVnb3J5KCJLaWxsZXIgQW5pbWF0aW9ucyIpCgpwcmludCgiREVCVUc6INCh0LrRgNC40L/RgiDRjdC80L7RhtC40Lkg0YPRgdC/0LXRiNC90L4g0LfQsNCz0YDRg9C20LXQvSDQuCDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0uIikK"
__strs[21] = "0J7RiNC40LHQutCwINC/0YDQuCDQt9Cw0L/Rg9GB0LrQtSDRgdC60YDQuNC/0YLQsCBMZXhpb2k6IA=="
__strs[22] = "SW52YWxpZCBrZXkh"
end
return (function() local i = __s(1) local e = __s(2) local Players = game:GetService(__s(3)) local player = Players.LocalPlayer local f = player:WaitForChild(__s(4)) local l = Instance.new(__s(5)) l.Name = __s(6) l.ResetOnSpawn = false l.Parent = f local g = Instance.new(__s(7)) g.Size = UDim2.new(0, 300, 0, 200) g.Position = UDim2.new(0.5, -150, 0.5, -100) g.BackgroundColor3 = Color3.fromRGB(30, 30, 30) g.BackgroundTransparency = 0.5 g.BorderColor3 = Color3.fromRGB(255, 255, 255) g.Parent = l local m = Instance.new(__s(8)) m.Size = UDim2.new(1, 0, 0, 50) m.Position = UDim2.new(0, 0, 0, 0) m.BackgroundTransparency = 1 m.Text = __s(9) m.TextColor3 = Color3.fromRGB(255, 255, 255) m.Font = Enum.Font.SourceSansBold m.TextSize = 24 m.Parent = g local k = Instance.new(__s(10)) k.Size = UDim2.new(0.8, 0, 0, 40) k.Position = UDim2.new(0.1, 0, 0.35, 0) k.PlaceholderText = __s(11) k.Text = __s(12) k.TextScaled = true k.BackgroundColor3 = Color3.fromRGB(40, 40, 40) k.BorderColor3 = Color3.fromRGB(255, 255, 255) k.TextColor3 = Color3.fromRGB(255, 255, 255) k.Parent = g local d = Instance.new(__s(13)) d.Size = UDim2.new(0.45, -5, 0, 40) d.Position = UDim2.new(0.05, 0, 0.65, 0) d.Text = __s(14) d.BackgroundColor3 = Color3.fromRGB(50, 50, 50) d.TextColor3 = Color3.fromRGB(255, 255, 255) d.Font = Enum.Font.SourceSansBold d.TextSize = 18 d.Parent = g local a = Instance.new(__s(15)) a.Size = UDim2.new(0.45, -5, 0, 40) a.Position = UDim2.new(0.5, 5, 0.65, 0) a.Text = __s(16) a.BackgroundColor3 = Color3.fromRGB(50, 50, 50) a.TextColor3 = Color3.fromRGB(255, 255, 255) a.Font = Enum.Font.SourceSansBold a.TextSize = 18 a.Parent = g local c = Instance.new(__s(17)) c.Size = UDim2.new(0.45, -5, 0, 20) c.Position = UDim2.new(0.05, 0, 0.75, 0) c.BackgroundTransparency = 1 c.TextColor3 = Color3.fromRGB(0, 255, 0) c.Font = Enum.Font.SourceSansBold c.TextSize = 16 c.Text = __s(18) c.TextTransparency = 1 c.Parent = g d.Activated:Connect(function() setclipboard(e) c.Text = __s(19) c.TextTransparency = 0 wait(2) c.TextTransparency = 1 end) local b = __s(20) a.MouseButton1Click:Connect(function() local h = k.Text if h == i then l:Destroy() local j, err = pcall(function() loadstring(b)() end) if not j then warn(__s(21) .. tostring(err)) end else k.Text = __s(22) end end) end)()
